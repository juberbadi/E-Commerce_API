var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.274,1,2.397]],["body/controllers/AppController.html",[0,2.156,1,4.055,2,1.776,3,0.284,4,0.247,5,0.247,6,4.176,7,0.39,8,0.023,9,1.048,10,3.683,11,4.176,12,0.284,13,0.221,14,2.816,15,4.903,16,4.176,17,0.927,18,1.181,19,4.903,20,0.018,21,0.018]],["title/modules/AppModule.html",[22,1.353,23,2.397]],["body/modules/AppModule.html",[1,3.71,2,1.729,3,0.202,4,0.176,5,0.176,7,0.439,8,0.023,9,0.745,10,3.64,11,2.969,12,0.202,13,0.157,20,0.015,21,0.015,22,1.836,23,4.809,24,1.618,25,2.216,26,2.969,27,2.969,28,2.969,29,2.942,30,3.947,31,3.947,32,3.947,33,3.947,34,2.544,35,1.857,36,1.857,37,3.486,38,2.742,39,2.742,40,3.486,41,2.002,42,1.262,43,3.486,44,3.486,45,3.486,46,1.857,47,1.618,48,3.486,49,3.486,50,3.486,51,0.373,52,3.486,53,3.486,54,3.486,55,3.486,56,3.486,57,2.374,58,3.486,59,2.002,60,3.486,61,3.486,62,3.486,63,3.486,64,3.486,65,2.742,66,3.486]],["title/injectables/AppService.html",[10,2.021,67,1.009]],["body/injectables/AppService.html",[3,0.295,4,0.257,5,0.257,7,0.334,8,0.023,9,1.089,10,3.498,12,0.295,13,0.23,16,4.336,17,0.963,18,1.226,20,0.019,21,0.019,67,1.747,68,2.363,69,4.336,70,5.091,71,5.091]],["title/controllers/AuthController.html",[0,1.274,72,2.397]],["body/controllers/AuthController.html",[0,0.842,2,0.842,3,0.135,4,0.117,5,0.117,7,0.376,8,0.023,9,0.497,12,0.135,13,0.105,14,1.335,18,1.257,20,0.011,21,0.011,51,0.519,72,2.423,73,1.98,74,1.448,75,2.325,76,0.209,77,1.021,78,3.298,79,4.843,80,3.558,81,4.125,82,3.031,83,1.497,84,2.325,85,3.558,86,3.558,87,3.558,88,2.325,89,2.692,90,1.395,91,0.706,92,2.325,93,1.497,94,1.878,95,2.325,96,3.916,97,2.325,98,5.909,99,3.558,100,4.843,101,4.125,102,4.125,103,4.125,104,2.325,105,1.389,106,1.389,107,1.389,108,2.325,109,2.325,110,2.325,111,1.98,112,3.611,113,2.325,114,3.558,115,3.558,116,2.734,117,4.843,118,4.843,119,4.843,120,3.558,121,3.558,122,4.843,123,4.843,124,4.125,125,4.125,126,2.325,127,1.98,128,2.325,129,2.683,130,2.325,131,1.448,132,1.448,133,1.448,134,2.483,135,1.98,136,1.753,137,1.753,138,1.448,139,1.448,140,2.216,141,3.251,142,3.429,143,3.558,144,3.016,145,0.842,146,1.584,147,1.448,148,1.154,149,1.98,150,2.325,151,2.325,152,2.325,153,3.558,154,3.031,155,3.558,156,2.325,157,2.325,158,2.325,159,2.325,160,2.325,161,2.325,162,2.325,163,2.325,164,2.325,165,2.325,166,2.325,167,1.448,168,2.325,169,2.325,170,2.325,171,2.325]],["title/classes/AuthCredentialsDto.html",[13,0.159,112,2.021]],["body/classes/AuthCredentialsDto.html",[3,0.2,4,0.174,5,0.174,7,0.311,8,0.022,12,0.2,13,0.214,17,1.28,20,0.015,21,0.015,51,0.655,57,3.689,59,3.111,76,0.31,83,1.754,91,0.827,112,2.723,145,1.249,172,0.934,173,5.381,174,2.938,175,1.717,176,2.886,177,4.085,178,4.085,179,3.606,180,3.45,181,3.45,182,3.45,183,3.45,184,4.741,185,4.741,186,4.741,187,4.741,188,4.741,189,4.764,190,4.741,191,5.833,192,5.833,193,4.741,194,2.723,195,4.741,196,4.741,197,5.417,198,4.038,199,5.417,200,4.741,201,3.45,202,3.45,203,5.417,204,3.45,205,1.838,206,3.45,207,3.45,208,3.45,209,3.45,210,3.45]],["title/modules/AuthModule.html",[22,1.353,29,1.633]],["body/modules/AuthModule.html",[2,1.825,3,0.219,4,0.19,5,0.19,7,0.441,8,0.023,9,0.807,12,0.219,13,0.17,20,0.016,21,0.016,22,1.937,24,1.751,25,2.338,29,3.163,34,2.684,35,2.01,36,2.01,38,2.893,39,2.167,41,2.167,42,1.366,72,3.863,134,3.726,135,3.214,148,1.873,189,2.845,211,3.214,212,3.214,213,3.214,214,4.354,215,3.773,216,5.038,217,3.773,218,2.167,219,2.845,220,5.038,221,3.773,222,2.845,223,3.773,224,3.773,225,3.773,226,3.773,227,2.57,228,3.773,229,3.773,230,3.214,231,3.773,232,3.773,233,5.038,234,3.773,235,3.773]],["title/injectables/AuthService.html",[67,1.009,134,2.021]],["body/injectables/AuthService.html",[3,0.143,4,0.125,5,0.125,7,0.404,8,0.023,9,0.53,12,0.143,13,0.112,17,0.706,18,1.293,20,0.012,21,0.012,42,0.897,51,0.575,59,2.144,67,1.071,68,1.15,76,0.222,77,1.071,81,3.18,82,3.18,90,1.07,91,0.763,93,1.539,94,1.91,96,3.976,101,3.18,102,4.261,103,3.18,105,1.539,106,1.539,107,1.539,111,3.18,112,3.542,127,3.18,129,1.868,134,2.144,136,1.868,137,1.868,146,1.687,149,2.11,176,3.006,218,3.24,219,1.868,222,1.868,227,3.06,236,2.11,237,4.261,238,2.643,239,3.734,240,3.734,241,2.144,242,2.11,243,5.856,244,2.477,245,2.477,246,2.477,247,2.477,248,3.734,249,2.477,250,3.734,251,2.477,252,2.11,253,1.423,254,2.815,255,2.799,256,2.11,257,2.477,258,2.144,259,2.477,260,2.317,261,2.306,262,3.18,263,3.734,264,3.734,265,3.734,266,3.734,267,3.18,268,5.003,269,3.734,270,1.989,271,1.854,272,3.734,273,2.477,274,2.477]],["title/classes/Category.html",[13,0.159,275,1.201]],["body/classes/Category.html",[3,0.246,4,0.214,5,0.214,7,0.357,8,0.023,12,0.246,13,0.191,17,1.198,20,0.017,21,0.017,51,0.643,65,3.125,76,0.381,83,1.722,91,0.812,172,1.149,175,1.97,275,1.858,276,3.615,277,4.528,278,2.175,279,4.09,280,3.74,281,4.244,282,3.74,283,4.244,284,2.236,285,2.891,286,2.643,287,3.389,288,4.244,289,3.389,290,2.891,291,1.735,292,3.2,293,2.891,294,3.615]],["title/controllers/CategoryController.html",[0,1.274,295,2.397]],["body/controllers/CategoryController.html",[0,0.869,2,0.869,3,0.139,4,0.121,5,0.121,7,0.365,8,0.023,9,0.513,12,0.139,13,0.108,14,1.379,17,1.096,18,1.275,20,0.011,21,0.011,51,0.527,74,1.495,76,0.215,77,1.046,83,1.519,89,3.472,90,1.192,91,0.716,93,1.519,94,1.894,105,1.412,106,1.662,107,1.412,116,2.766,131,2.271,132,2.271,133,1.495,138,3.067,139,1.495,140,3.067,141,2.271,142,3.718,144,3.067,145,0.869,147,1.495,148,1.192,167,2.746,275,1.245,278,2.378,284,1.903,295,2.483,296,2.045,297,2.749,298,3.106,299,3.106,300,3.713,301,3.106,302,1.81,303,3.733,304,2.045,305,1.635,306,2.401,307,2.045,308,2.045,309,2.483,310,3.353,311,3.003,312,3.003,313,3.797,314,2.483,315,2.401,316,2.045,317,2.045,318,2.401,319,2.401,320,1.635,321,3.797,322,2.401,323,2.045,324,2.045,325,2.401,326,1.635,327,1.635,328,1.635,329,1.81,330,0.923,331,1.81,332,2.532,333,2.045,334,2.401,335,2.401,336,3.353,337,2.401,338,1.635,339,3.003,340,2.189,341,2.401,342,2.401,343,2.401,344,2.401,345,1.635,346,2.401,347,2.483,348,2.401,349,1.635,350,2.401,351,2.401]],["title/modules/CategoryModule.html",[22,1.353,30,2.192]],["body/modules/CategoryModule.html",[2,1.974,3,0.247,4,0.215,5,0.215,7,0.44,8,0.023,9,0.911,12,0.247,13,0.192,20,0.017,21,0.017,22,2.096,24,1.976,25,2.531,29,3.113,30,4.301,34,2.905,35,2.268,36,2.268,38,3.131,39,3.131,41,2.445,42,1.542,295,4.096,332,3.852,333,3.626,352,3.626,353,3.626,354,4.258,355,4.258,356,4.258,357,2.652,358,3.626,359,2.9,360,4.258]],["title/classes/CategoryRepository.html",[13,0.159,357,2.192]],["body/classes/CategoryRepository.html",[3,0.229,4,0.2,5,0.2,7,0.38,8,0.023,12,0.229,13,0.178,18,1.252,20,0.016,21,0.016,51,0.423,76,0.355,77,1.49,91,0.703,93,1.49,94,1.873,105,1.134,106,1.134,107,1.134,172,1.07,238,2.687,260,2.37,261,2.124,275,2.186,277,3.918,291,1.616,297,3.918,300,4.649,302,3.918,303,3.775,329,2.981,330,1.52,331,2.981,357,3.236,361,3.367,362,2.984,363,3.333,364,3.953,365,3.953,366,2.462,367,3.953,368,2.462,369,3.953,370,2.462,371,2.462,372,3.953]],["title/injectables/CategoryService.html",[67,1.009,332,2.021]],["body/injectables/CategoryService.html",[3,0.168,4,0.146,5,0.146,7,0.375,8,0.023,9,0.619,12,0.168,13,0.131,17,1.215,18,1.299,20,0.013,21,0.013,42,1.048,51,0.613,67,1.201,68,1.343,76,0.26,77,1.201,91,0.807,93,1.642,94,1.982,105,1.642,106,1.642,107,1.642,238,2.625,241,1.661,253,1.661,258,1.661,260,1.892,261,2.205,270,2.231,271,2.079,275,1.68,278,2.326,297,3.711,298,3.566,299,3.566,300,4.067,301,3.566,302,2.181,303,3.835,307,3.566,316,3.566,323,3.566,329,2.181,330,1.112,331,2.181,332,2.405,340,2.678,357,3.717,358,2.464,373,2.464,374,2.893,375,2.893,376,2.893,377,2.893,378,2.893,379,2.893,380,2.893,381,1.97,382,2.893,383,2.893,384,2.893,385,1.97,386,4.187,387,2.893,388,2.893,389,2.893,390,2.893,391,2.893,392,1.97,393,2.893,394,1.97,395,1.97,396,1.802]],["title/classes/CreateCategoryDto.html",[13,0.159,303,2.021]],["body/classes/CreateCategoryDto.html",[3,0.281,4,0.245,5,0.245,7,0.388,8,0.022,12,0.281,13,0.267,17,1.119,20,0.018,21,0.018,51,0.519,76,0.435,83,1.391,91,0.656,145,1.756,172,1.313,175,2.142,179,3.151,205,2.584,277,4.812,303,3.397,397,5.037,398,4.13,399,3.303,400,4.849,401,3.683]],["title/classes/CreateDeliveryAddressDto.html",[13,0.159,402,2.021]],["body/classes/CreateDeliveryAddressDto.html",[3,0.206,4,0.18,5,0.18,7,0.318,8,0.022,12,0.206,13,0.219,17,1.326,20,0.015,21,0.015,51,0.699,76,0.32,83,1.872,91,0.882,145,1.289,172,0.964,175,1.755,179,3.538,205,1.897,399,4.445,401,4.136,402,2.783,403,3.538,404,5.657,405,3.033,406,3.751,407,4.152,408,4.152,409,4.152,410,4.152,411,4.152,412,4.152,413,3.561,414,3.561,415,3.561,416,3.561,417,3.561,418,3.561,419,3.561]],["title/classes/CreateOrderDto.html",[13,0.159,420,2.021]],["body/classes/CreateOrderDto.html",[3,0.22,4,0.192,5,0.192,7,0.332,8,0.022,12,0.22,13,0.228,17,0.956,20,0.016,21,0.016,51,0.696,76,0.341,83,1.864,91,0.879,145,1.374,172,1.027,175,1.831,179,3.534,194,3.958,205,2.022,284,1.942,399,4.426,401,4.131,420,2.905,421,5.65,422,3.232,423,2.475,424,4.289,425,4.289,426,4.289,427,4.289,428,3.795,429,3.795,430,3.795,431,3.795,432,3.795,433,3.795]],["title/classes/CreateProductDto.html",[13,0.159,434,2.021]],["body/classes/CreateProductDto.html",[3,0.217,4,0.189,5,0.189,7,0.37,8,0.022,12,0.217,13,0.226,17,1.224,20,0.016,21,0.016,51,0.693,76,0.336,83,1.856,91,0.875,116,2.308,145,1.355,172,1.013,175,1.814,179,3.522,194,3.717,205,1.993,275,2.059,399,4.408,401,4.117,434,2.877,435,5.63,436,2.821,437,3.517,438,3.517,439,3.517,440,3.517,441,3.741,442,3.741,443,3.187,444,3.741,445,3.741,446,3.741,447,2.149]],["title/classes/DeliveryAddress.html",[13,0.159,423,1.531]],["body/classes/DeliveryAddress.html",[3,0.169,4,0.147,5,0.147,7,0.355,8,0.023,12,0.169,13,0.19,17,1.303,20,0.013,21,0.013,47,3.072,51,0.7,65,3.111,76,0.262,83,1.874,90,1.351,91,0.884,172,0.79,175,1.526,278,1.791,280,4.266,282,3.08,285,1.988,286,2.624,287,3.373,289,2.624,290,1.988,291,1.193,293,1.988,403,3.526,406,3.368,407,3.729,408,3.729,409,3.729,410,3.729,411,3.729,412,3.729,423,1.833,448,2.486,449,2.932,450,2.918,451,2.918,452,2.918,453,2.918,454,2.918,455,2.918,456,2.918,457,2.918,458,2.918,459,2.201,460,2.201,461,2.918,462,2.201,463,1.122,464,3.177,465,1.818,466,2.201,467,2.201,468,2.918,469,2.201,470,2.201,471,2.486]],["title/controllers/DeliveryAddressController.html",[0,1.274,472,2.397]],["body/controllers/DeliveryAddressController.html",[0,0.801,2,0.801,3,0.128,4,0.112,5,0.112,7,0.381,8,0.023,9,0.473,12,0.128,13,0.1,14,1.271,17,1.064,18,1.229,20,0.011,21,0.011,46,2.233,47,2.505,51,0.505,74,1.378,76,0.199,77,0.982,83,1.464,89,3.799,90,1.428,91,0.69,93,1.464,94,1.853,105,1.353,106,1.614,107,1.353,116,2.762,131,2.133,132,2.133,133,1.378,138,2.938,139,1.378,140,2.133,141,2.133,142,3.622,144,3.361,145,0.801,147,1.378,148,1.098,167,1.378,278,2.313,284,1.842,305,2.333,309,2.854,310,3.213,311,2.854,312,2.854,313,3.676,314,2.333,320,1.507,321,3.476,326,1.507,327,1.507,328,1.507,330,0.851,336,3.213,338,1.507,339,2.854,340,2.08,345,1.507,347,2.333,349,1.507,402,3.668,403,2.875,406,2.854,423,0.963,463,0.851,472,2.333,473,1.884,474,2.583,475,2.917,476,3.557,477,2.917,478,2.917,479,1.668,480,1.884,481,2.213,482,1.884,483,1.884,484,1.668,485,2.213,486,2.213,487,1.884,488,1.884,489,2.213,490,1.884,491,1.884,492,2.213,493,2.407,494,1.884,495,1.668,496,1.378,497,2.133,498,1.378,499,1.668,500,2.213,501,2.213,502,2.213,503,2.213,504,2.213,505,2.213,506,2.213,507,2.213,508,2.213,509,2.213,510,2.213]],["title/modules/DeliveryAddressModule.html",[22,1.353,31,2.192]],["body/modules/DeliveryAddressModule.html",[2,1.954,3,0.243,4,0.211,5,0.211,7,0.438,8,0.023,9,0.896,12,0.243,13,0.189,20,0.017,21,0.017,22,2.075,24,1.945,25,2.505,29,3.1,31,4.287,34,2.875,35,2.233,36,2.233,38,3.099,39,3.099,41,2.407,42,1.518,46,3.18,47,1.945,359,2.854,403,2.233,472,4.066,493,3.836,494,3.569,511,3.569,512,4.191,513,3.569,514,4.191,515,4.191,516,2.61,517,3.569,518,4.191]],["title/classes/DeliveryAddressRepository.html",[13,0.159,516,2.192]],["body/classes/DeliveryAddressRepository.html",[3,0.21,4,0.183,5,0.183,7,0.39,8,0.023,12,0.21,13,0.163,18,1.18,20,0.015,21,0.015,46,1.928,47,2.577,51,0.388,76,0.325,77,1.405,90,1.426,91,0.662,93,1.405,94,1.808,105,1.038,106,1.038,107,1.038,172,0.98,238,2.62,260,2.288,261,2.002,291,1.479,330,1.391,362,2.813,363,3.189,366,2.254,368,2.254,370,2.254,371,2.254,402,3.681,403,2.959,406,3.336,407,3.694,408,3.694,409,3.694,410,3.694,411,3.694,412,3.694,423,2.705,463,1.391,474,3.694,476,4.487,479,3.694,495,2.729,496,2.254,516,3.051,519,3.082,520,3.619,521,3.619,522,3.619,523,3.619,524,3.619]],["title/injectables/DeliveryAddressService.html",[67,1.009,493,2.021]],["body/injectables/DeliveryAddressService.html",[3,0.153,4,0.133,5,0.133,7,0.378,8,0.023,9,0.563,12,0.153,13,0.119,17,1.186,18,1.242,20,0.012,21,0.012,42,0.954,46,2.083,47,2.774,51,0.59,67,1.121,68,1.223,76,0.236,77,1.121,90,1.313,91,0.781,93,1.58,94,1.939,105,1.58,106,1.58,107,1.58,238,2.563,241,1.513,253,1.513,258,1.513,260,1.792,261,2.108,270,2.083,271,1.941,278,2.271,330,1.013,340,2.561,381,1.794,385,1.794,392,1.794,394,1.794,395,1.794,396,1.641,402,3.718,403,3.184,423,2.028,463,1.013,474,2.948,475,3.33,476,3.889,477,3.33,478,3.33,479,2.948,482,3.33,487,3.33,490,3.33,493,2.245,495,1.986,496,1.641,516,3.595,517,2.244,525,2.244,526,2.634,527,2.634,528,2.634,529,2.634,530,2.634,531,2.634,532,2.634,533,2.634,534,2.634,535,2.634,536,3.91,537,2.634,538,2.634,539,2.634,540,2.634,541,2.634,542,2.634,543,2.634,544,2.634,545,2.634,546,2.634,547,2.634,548,2.634,549,2.634,550,2.634,551,2.634,552,2.634,553,2.634,554,2.634]],["title/interfaces/JwtPayload.html",[255,2.192,555,2.397]],["body/interfaces/JwtPayload.html",[3,0.298,4,0.26,5,0.26,8,0.022,12,0.298,17,1.239,20,0.019,21,0.019,51,0.552,76,0.462,175,2.221,176,3.612,255,3.82,555,3.508,556,5.15,557,4.387,558,4.387]],["title/injectables/JwtStrategy.html",[67,1.009,214,2.192]],["body/injectables/JwtStrategy.html",[3,0.214,4,0.187,5,0.187,7,0.432,8,0.023,9,0.791,12,0.214,13,0.167,18,0.891,20,0.015,21,0.015,42,1.34,51,0.532,67,1.426,68,1.717,76,0.332,77,1.426,90,1.284,91,0.672,93,1.061,94,1.511,105,1.426,106,1.426,107,1.426,146,2.52,148,1.837,176,2.649,214,3.097,218,3.705,219,2.79,227,3.386,230,3.151,238,2.295,241,2.125,242,3.151,252,4.235,253,2.125,255,3.74,256,3.151,258,2.125,260,1.912,261,1.512,262,3.151,267,4.235,270,1.971,271,1.837,362,2.125,559,3.151,560,4.972,561,3.7,562,4.972,563,3.7,564,3.7,565,3.7,566,3.7,567,3.151,568,3.7,569,3.7,570,3.7,571,3.7,572,3.7,573,3.7,574,3.7]],["title/classes/Order.html",[13,0.159,449,1.633]],["body/classes/Order.html",[3,0.177,4,0.154,5,0.154,7,0.383,8,0.023,12,0.177,13,0.196,17,1.046,20,0.014,21,0.014,46,1.626,47,1.417,51,0.685,65,3.49,76,0.274,83,1.834,90,1.367,91,0.864,172,0.826,175,1.576,194,3.79,278,1.837,280,4.052,282,3.159,284,2.075,286,3.159,287,3.785,289,2.711,291,1.248,292,2.302,423,2.644,424,3.824,425,3.824,426,3.824,427,3.824,449,2.02,459,3.824,460,3.824,462,2.302,463,1.174,464,4.169,465,1.901,467,3.824,469,3.824,470,3.824,496,1.901,575,2.6,576,3.053,577,3.053,578,3.053,579,3.053,580,3.053,581,3.053,582,3.053,583,3.053,584,3.053,585,3.053,586,3.053]],["title/controllers/OrdersController.html",[0,1.274,587,2.397]],["body/controllers/OrdersController.html",[0,0.804,2,0.804,3,0.129,4,0.112,5,0.112,7,0.4,8,0.023,9,0.475,12,0.129,13,0.1,14,1.275,17,1.066,18,1.231,20,0.011,21,0.011,51,0.506,74,1.383,76,0.199,77,0.985,83,1.466,89,3.802,90,1.408,91,0.691,93,1.466,94,1.855,105,1.356,106,1.67,107,1.356,116,2.764,131,2.139,132,2.139,133,1.383,138,3.183,139,1.383,140,2.139,141,2.139,142,3.626,144,3.366,145,0.804,147,1.383,148,1.102,167,1.383,275,0.758,278,2.385,284,1.845,305,2.339,309,2.339,310,3.219,311,2.86,312,2.86,313,3.681,314,1.512,317,1.891,320,1.512,321,3.481,326,1.512,327,1.512,328,1.512,330,0.854,336,3.219,338,1.512,339,2.86,340,2.085,345,1.512,347,2.339,349,1.512,420,3.671,447,1.275,449,1.03,463,0.854,480,1.891,483,1.891,484,2.589,491,1.891,497,2.139,498,1.383,499,1.674,587,2.339,588,1.891,589,1.891,590,2.589,591,2.925,592,2.925,593,3.564,594,2.925,595,1.674,596,2.22,597,1.891,598,2.22,599,1.891,600,3.434,601,2.22,602,2.22,603,1.891,604,2.22,605,2.412,606,1.891,607,1.674,608,1.674,609,1.512,610,1.891,611,1.891,612,2.22,613,2.22,614,2.22,615,2.22,616,2.22,617,2.22,618,2.22,619,2.22,620,2.22,621,2.22,622,2.22]],["title/modules/OrdersModule.html",[22,1.353,32,2.192]],["body/modules/OrdersModule.html",[2,1.974,3,0.247,4,0.215,5,0.215,7,0.44,8,0.023,9,0.911,12,0.247,13,0.192,20,0.017,21,0.017,22,2.096,24,1.976,25,2.531,29,3.113,32,4.301,34,2.905,35,2.268,36,2.268,38,3.131,39,3.131,41,2.445,42,1.542,359,2.9,587,4.096,605,3.852,606,3.626,623,3.626,624,4.258,625,3.626,626,4.258,627,4.258,628,2.652,629,3.626,630,4.258]],["title/classes/OrdersRepository.html",[13,0.159,628,2.192]],["body/classes/OrdersRepository.html",[3,0.215,4,0.187,5,0.187,7,0.394,8,0.023,12,0.215,13,0.167,18,1.2,20,0.015,21,0.015,51,0.397,76,0.333,77,1.429,90,1.434,91,0.674,93,1.429,94,1.827,105,1.064,106,1.064,107,1.064,172,1.004,238,2.639,260,2.311,261,2.036,284,1.701,291,1.516,330,1.426,362,2.861,363,3.23,366,2.311,368,2.311,370,2.311,371,2.311,420,3.708,423,2.167,424,3.756,425,3.756,426,3.756,427,3.756,449,2.61,463,1.426,589,4.243,590,3.756,593,4.533,595,3.756,607,2.797,608,2.797,628,3.102,631,3.16,632,3.71,633,3.71,634,3.71,635,3.71,636,3.71]],["title/injectables/OrdersService.html",[67,1.009,605,2.021]],["body/injectables/OrdersService.html",[3,0.159,4,0.138,5,0.138,7,0.384,8,0.023,9,0.585,12,0.159,13,0.124,17,1.198,18,1.266,20,0.012,21,0.012,42,0.991,51,0.6,67,1.154,68,1.271,76,0.246,77,1.154,90,1.327,91,0.791,93,1.606,94,1.957,105,1.606,106,1.606,107,1.606,238,2.589,241,1.572,253,1.572,258,1.572,260,1.833,261,2.148,270,2.143,271,1.997,278,2.294,330,1.053,340,2.609,381,1.865,385,1.865,392,1.865,394,1.865,395,1.865,396,1.705,420,3.75,449,2.213,463,1.053,471,2.332,590,3.033,591,3.426,592,3.426,593,3.963,594,3.426,595,3.033,597,3.426,599,3.426,603,3.426,605,2.31,607,2.064,608,2.064,628,3.646,629,2.332,637,2.332,638,2.738,639,2.738,640,2.738,641,2.738,642,2.738,643,2.738,644,2.738,645,2.738,646,2.738,647,2.738,648,4.022,649,2.738,650,2.738,651,2.738,652,2.738,653,2.738,654,2.738,655,2.738,656,2.738,657,2.738,658,2.738,659,2.332,660,2.738,661,2.738,662,2.738,663,2.738]],["title/classes/Product.html",[13,0.159,284,1.201]],["body/classes/Product.html",[3,0.174,4,0.152,5,0.152,7,0.381,8,0.023,12,0.174,13,0.194,17,1.204,20,0.013,21,0.013,51,0.694,65,3.471,76,0.27,83,1.859,90,1.361,91,0.876,116,2.054,172,0.813,175,1.558,194,3.471,275,2.064,278,1.82,280,4.146,282,3.131,284,1.469,285,2.046,286,3.131,287,3.765,289,2.68,290,2.046,291,1.228,293,2.046,437,3.131,438,3.131,439,3.131,440,3.131,447,1.725,449,2.955,459,3.244,460,3.244,462,2.265,463,1.155,464,3.791,465,1.871,466,2.265,467,3.244,469,3.244,470,3.244,659,2.559,664,2.559,665,3.004,666,3.004,667,3.004,668,3.004,669,3.004,670,3.004,671,3.004,672,3.004,673,3.004,674,3.004,675,3.004]],["title/controllers/ProductsController.html",[0,1.274,676,2.397]],["body/controllers/ProductsController.html",[0,0.816,2,0.816,3,0.131,4,0.114,5,0.114,7,0.409,8,0.023,9,0.482,12,0.131,13,0.102,14,1.294,17,1.072,18,1.24,20,0.011,21,0.011,51,0.51,74,1.404,76,0.202,77,0.996,78,3.245,83,1.476,89,3.387,90,1.387,91,0.696,93,1.476,94,1.863,105,1.366,106,1.625,107,1.366,116,2.738,131,2.164,132,2.164,133,1.404,138,2.967,139,1.404,140,2.967,141,2.164,142,3.644,144,2.967,145,0.816,147,1.404,148,1.119,167,2.641,275,0.769,278,2.322,279,1.535,284,1.934,304,1.92,305,1.535,308,1.92,309,2.888,310,3.245,311,2.888,312,2.888,313,3.703,314,1.535,320,1.535,321,3.703,324,1.92,326,1.535,327,1.535,328,1.535,330,0.867,336,3.245,338,1.535,339,2.888,340,2.365,345,1.535,347,2.366,349,1.535,434,3.123,447,1.294,463,0.867,484,1.7,488,1.92,497,2.164,498,1.404,499,1.7,609,1.535,610,1.92,611,1.92,676,2.366,677,1.92,678,2.62,679,2.959,680,3.474,681,2.959,682,1.7,683,2.254,684,1.92,685,2.254,686,2.254,687,2.254,688,2.254,689,1.92,690,3.644,691,2.254,692,2.435,693,1.92,694,2.62,695,1.7,696,1.92,697,2.254,698,2.254,699,2.254,700,2.254,701,2.254,702,2.254,703,2.254,704,2.254,705,2.254,706,2.254,707,2.254]],["title/modules/ProductsModule.html",[22,1.353,33,2.192]],["body/modules/ProductsModule.html",[2,1.974,3,0.247,4,0.215,5,0.215,7,0.44,8,0.023,9,0.911,12,0.247,13,0.192,20,0.017,21,0.017,22,2.096,24,1.976,25,2.531,29,3.113,33,4.301,34,2.905,35,2.268,36,2.268,38,3.131,39,3.131,41,2.445,42,1.542,359,2.9,676,4.096,692,3.852,693,3.626,708,3.626,709,3.626,710,4.258,711,4.258,712,4.258,713,2.652,714,3.626,715,4.258]],["title/classes/ProductsRepository.html",[13,0.159,713,2.192]],["body/classes/ProductsRepository.html",[3,0.212,4,0.185,5,0.185,7,0.409,8,0.023,12,0.212,13,0.165,18,1.189,20,0.015,21,0.015,51,0.392,76,0.328,77,1.415,78,4.071,90,1.429,91,0.667,93,1.415,94,1.816,105,1.049,106,1.049,107,1.049,116,2.017,172,0.99,238,2.628,260,2.298,261,2.017,275,1.906,279,3.361,284,1.906,291,1.495,330,1.407,362,2.834,363,3.207,366,2.279,368,2.279,370,2.279,371,2.279,434,3.693,437,3.074,438,3.074,439,3.074,440,3.074,447,2.101,463,1.407,678,3.721,682,3.721,694,2.759,695,2.759,713,3.074,716,3.116,717,3.659,718,3.659,719,3.659,720,3.659,721,3.659]],["title/injectables/ProductsService.html",[67,1.009,692,2.021]],["body/injectables/ProductsService.html",[3,0.148,4,0.129,5,0.129,7,0.399,8,0.023,9,0.547,12,0.148,13,0.115,17,1.177,18,1.225,20,0.012,21,0.012,42,0.926,51,0.583,67,1.097,68,1.187,76,0.23,77,1.097,78,3.463,90,1.301,91,0.772,93,1.561,94,1.925,105,1.561,106,1.561,107,1.561,116,1.045,238,2.543,241,1.469,253,1.469,258,1.469,260,1.955,261,2.078,270,2.038,271,1.899,275,0.873,278,2.253,284,1.736,294,2.179,330,0.984,340,2.524,381,1.742,385,1.742,392,1.742,394,1.742,395,1.742,396,1.593,434,3.28,437,1.593,438,1.593,439,1.593,440,1.593,447,1.469,463,0.984,678,3.455,679,3.258,681,3.258,682,1.929,684,3.258,689,3.258,690,3.686,692,2.197,694,2.884,695,1.929,696,2.179,713,3.557,714,2.179,722,2.179,723,3.825,724,2.558,725,2.558,726,2.558,727,2.558,728,3.825,729,2.558,730,2.558,731,2.558,732,2.558,733,2.558,734,2.558,735,3.825,736,2.558,737,2.558,738,2.558,739,2.558,740,2.558,741,2.558,742,2.558,743,2.558,744,2.558,745,2.558,746,2.558,747,2.558,748,2.558,749,2.558,750,2.558,751,2.558,752,2.558,753,2.558,754,2.558,755,2.558]],["title/classes/SignInDto.html",[13,0.159,96,2.192]],["body/classes/SignInDto.html",[3,0.276,4,0.24,5,0.24,7,0.312,8,0.022,12,0.276,13,0.215,17,1.249,20,0.018,21,0.018,51,0.626,59,3.636,76,0.427,83,1.677,91,0.791,96,3.643,145,1.725,172,1.289,175,2.118,176,3.373,179,3.611,756,4.056,757,4.762,758,4.762]],["title/injectables/TransformInterceptor.html",[67,1.009,759,2.653]],["body/injectables/TransformInterceptor.html",[3,0.258,4,0.225,5,0.225,7,0.403,8,0.022,9,0.953,12,0.258,13,0.253,18,1.074,20,0.017,21,0.017,51,0.477,67,1.61,68,2.069,76,0.4,77,1.61,91,0.603,93,1.279,105,1.279,106,1.279,107,1.279,465,2.777,759,4.233,760,3.797,761,5.614,762,5.614,763,5.493,764,5.614,765,6.145,766,4.458,767,4.458,768,5.614,769,4.458,770,4.458,771,4.458,772,4.458,773,4.458,774,4.458,775,4.458]],["title/classes/UpdateProductDto.html",[13,0.159,690,2.192]],["body/classes/UpdateProductDto.html",[3,0.224,4,0.195,5,0.195,7,0.335,8,0.022,12,0.224,13,0.231,17,1.235,20,0.016,21,0.016,51,0.699,76,0.347,83,1.873,91,0.883,116,2.345,145,1.398,172,1.045,175,1.853,179,3.759,194,3.751,205,2.057,275,1.959,401,2.405,436,2.911,437,3.573,438,3.573,439,3.573,440,3.573,443,3.289,690,3.186,776,5.674,777,3.861,778,3.861,779,3.861,780,3.861,781,3.861]],["title/classes/User.html",[13,0.159,90,0.753]],["body/classes/User.html",[3,0.169,4,0.148,5,0.148,7,0.377,8,0.023,12,0.169,13,0.132,17,1.265,20,0.013,21,0.013,46,1.558,47,1.358,51,0.7,57,3.373,59,2.844,65,3.755,76,0.263,83,1.875,90,1.059,91,0.884,172,0.792,175,1.528,176,2.638,177,3.734,178,3.734,278,1.793,280,4.123,282,3.084,284,2.158,285,3.373,286,3.084,287,3.731,289,2.629,290,1.992,291,1.195,292,2.205,293,3.373,423,2.75,449,2.934,466,2.205,496,1.822,782,2.491,783,4.218,784,2.925,785,4.221,786,2.925,787,2.925,788,2.925,789,2.925,790,2.925,791,2.925,792,2.925,793,3.734,794,2.925,795,2.925,796,2.491,797,4.221,798,2.925,799,2.925,800,2.925]],["title/classes/UsersRepository.html",[13,0.159,218,2.021]],["body/classes/UsersRepository.html",[3,0.153,4,0.133,5,0.133,7,0.378,8,0.023,9,0.563,12,0.153,13,0.119,18,0.635,20,0.012,21,0.012,51,0.419,57,3.513,59,3.315,76,0.236,77,1.121,90,1.234,91,0.63,93,1.337,94,1.754,105,1.121,106,1.121,107,1.121,112,3.718,124,3.33,125,3.33,136,1.986,137,1.986,146,1.794,154,4.917,172,0.713,176,2.748,177,3.889,178,3.889,218,2.245,237,4.393,238,2.563,254,3.889,260,2.453,261,2.442,270,2.748,271,2.561,279,2.663,291,1.077,362,2.245,363,2.677,366,1.641,368,1.641,370,1.641,371,2.435,783,3.33,793,1.986,796,2.244,801,2.244,802,3.91,803,3.91,804,3.91,805,2.634,806,3.91,807,2.634,808,2.634,809,2.634,810,4.662,811,2.634,812,3.91,813,3.91,814,5.158,815,3.91,816,5.158,817,3.91,818,3.91,819,2.634,820,3.91,821,3.91,822,5.158,823,3.91,824,3.91,825,5.158,826,3.91,827,3.91,828,3.91,829,3.91,830,2.634,831,2.634]],["title/coverage.html",[832,3.624]],["body/coverage.html",[0,2.142,1,1.92,5,0.142,6,2.401,8,0.023,10,1.619,13,0.311,20,0.013,21,0.013,47,2.474,51,0.302,67,1.795,69,2.401,72,1.92,73,2.401,90,0.603,96,1.756,112,1.619,134,1.619,173,2.401,174,2.401,214,1.756,218,1.619,236,2.401,255,1.756,271,1.4,275,0.962,276,2.401,284,0.962,295,1.92,296,2.401,303,1.619,332,1.619,357,1.756,361,2.401,373,2.401,396,4.503,397,2.401,398,2.401,402,1.619,403,3.018,404,2.401,405,2.401,420,1.619,421,2.401,422,2.401,423,1.227,434,1.619,435,2.401,436,3.099,448,2.401,449,1.308,472,1.92,473,2.401,493,1.619,497,1.756,498,1.756,516,1.756,519,2.401,525,2.401,555,1.92,557,2.401,558,2.401,559,2.401,575,2.401,587,1.92,588,2.401,605,1.619,609,1.92,628,1.756,631,2.401,637,2.401,664,2.401,676,1.92,677,2.401,690,1.756,692,1.619,713,1.756,716,2.401,722,2.401,756,2.401,759,2.126,760,2.401,776,2.401,782,2.401,801,2.401,832,2.126,833,2.819,834,2.819,835,2.819,836,5.665,837,5.914,838,6.258,839,5.914,840,2.401,841,4.109,842,4.849,843,4.109,844,4.109,845,2.401,846,2.401,847,2.819,848,2.401,849,2.819,850,2.401,851,2.819,852,2.819,853,2.819,854,2.819]],["title/dependencies.html",[25,1.965,855,2.937]],["body/dependencies.html",[8,0.023,9,0.96,13,0.254,20,0.018,21,0.018,25,2.083,42,1.625,145,1.625,148,2.228,205,2.391,222,3.384,227,3.057,254,3.384,291,1.834,465,2.795,567,4.802,856,6.465,857,4.488,858,4.488,859,4.488,860,5.638,861,4.488,862,4.488,863,4.488,864,4.488,865,4.488,866,4.488,867,4.488,868,4.488,869,4.488,870,4.488,871,4.488,872,4.488,873,4.488,874,4.488,875,4.488,876,4.488,877,4.488,878,4.488,879,4.488,880,4.488]],["title/miscellaneous/enumerations.html",[881,1.687,882,3.605]],["body/miscellaneous/enumerations.html",[8,0.022,20,0.019,21,0.019,76,0.468,90,1.321,129,4.657,793,4.657,881,2.993,882,4.438,883,5.211,884,6.176,885,5.211,886,5.606,887,6.176]],["title/miscellaneous/functions.html",[881,1.687,888,3.605]],["body/miscellaneous/functions.html",[8,0.02,20,0.02,21,0.02,76,0.493,848,4.677,850,5.729,881,3.154,888,4.677,889,5.492]],["title/index.html",[76,0.264,890,2.937,891,2.937]],["body/index.html",[4,0.206,8,0.022,20,0.016,21,0.016,116,1.665,363,2.34,832,3.072,892,4.075,893,4.075,894,5.3,895,4.075,896,4.075,897,4.075,898,4.075,899,4.075,900,4.075,901,5.89,902,4.075,903,4.075,904,4.075,905,6.749,906,4.075,907,4.075,908,4.075,909,6.628,910,4.075,911,4.075,912,5.3,913,4.075,914,4.075,915,4.075,916,4.075,917,5.3,918,5.3,919,4.075,920,4.075,921,4.075,922,5.3,923,5.3,924,4.075,925,4.075,926,4.075,927,4.075,928,4.075,929,3.47,930,4.075,931,4.075,932,4.075,933,4.075,934,4.075,935,4.075,936,4.075,937,4.075,938,4.075,939,4.075,940,4.075,941,4.075,942,4.075,943,4.075,944,4.075,945,4.075,946,4.075,947,4.075]],["title/modules.html",[24,2.231]],["body/modules.html",[8,0.019,20,0.019,21,0.019,23,3.415,24,2.327,29,2.327,30,3.123,31,3.123,32,3.123,33,3.123,929,5.948,948,6.983,949,6.983,950,6.983]],["title/overview.html",[951,4.093]],["body/overview.html",[2,1.332,8,0.022,10,3.216,20,0.015,21,0.015,23,4.798,24,1.708,25,2.299,26,3.134,27,3.134,28,3.134,29,3.232,30,4.099,31,4.099,32,4.099,33,4.099,34,2.639,35,1.96,36,1.96,68,1.708,134,3.216,172,0.996,189,2.774,198,3.134,211,3.134,212,3.134,213,3.134,214,4.099,332,3.216,352,3.134,353,3.134,493,3.216,511,3.134,513,3.134,555,2.506,605,3.216,623,3.134,625,3.134,692,3.216,708,3.134,709,3.134,951,3.134,952,4.953,953,3.679]],["title/miscellaneous/variables.html",[881,1.687,954,3.605]],["body/miscellaneous/variables.html",[8,0.023,18,1.39,20,0.018,21,0.018,76,0.418,90,0.997,260,2.219,275,1.592,497,3.595,498,2.903,609,3.932,763,4.917,840,4.917,845,3.97,846,4.917,881,2.677,886,4.917,954,3.97,955,5.773,956,5.773,957,5.773,958,5.773,959,5.773,960,5.773,961,5.773,962,4.662,963,4.662]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":396,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["0.2.40",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":847,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":189,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["16",{"_index":200,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["17",{"_index":953,"title":{},"body":{"overview.html":{}}}],["2.3.3",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":310,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["3.0.2",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["3306",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["3600",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["4.0.0",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["404",{"_index":312,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["409",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["5.0.1",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["5.1.4",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":952,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":198,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"overview.html":{}}}],["8.0.0",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["_data",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["address",{"_index":406,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{}}}],["address.controller",{"_index":515,"title":{},"body":{"modules/DeliveryAddressModule.html":{}}}],["address.controller.ts",{"_index":473,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"coverage.html":{}}}],["address.controller.ts:20",{"_index":486,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["address.controller.ts:29",{"_index":489,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["address.controller.ts:36",{"_index":481,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["address.controller.ts:45",{"_index":492,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["address.controller.ts:54",{"_index":485,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["address.dto",{"_index":495,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{}}}],["address.dto.ts",{"_index":405,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{},"coverage.html":{}}}],["address.dto.ts:11",{"_index":417,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{}}}],["address.dto.ts:15",{"_index":413,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{}}}],["address.dto.ts:19",{"_index":414,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{}}}],["address.dto.ts:23",{"_index":415,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{}}}],["address.dto.ts:27",{"_index":419,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{}}}],["address.dto.ts:31",{"_index":418,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{}}}],["address.dto.ts:7",{"_index":416,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{}}}],["address.entity",{"_index":496,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"classes/Order.html":{},"classes/User.html":{}}}],["address.entity.ts",{"_index":448,"title":{},"body":{"classes/DeliveryAddress.html":{},"coverage.html":{}}}],["address.entity.ts:11",{"_index":453,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["address.entity.ts:14",{"_index":456,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["address.entity.ts:17",{"_index":450,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["address.entity.ts:20",{"_index":451,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["address.entity.ts:23",{"_index":452,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["address.entity.ts:26",{"_index":458,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["address.entity.ts:29",{"_index":457,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["address.entity.ts:33",{"_index":461,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["address.entity.ts:36",{"_index":455,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["address.entity.ts:8",{"_index":454,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["address.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["address.module.ts",{"_index":514,"title":{},"body":{"modules/DeliveryAddressModule.html":{}}}],["address.repositry",{"_index":517,"title":{},"body":{"modules/DeliveryAddressModule.html":{},"injectables/DeliveryAddressService.html":{}}}],["address.repositry.ts",{"_index":519,"title":{},"body":{"classes/DeliveryAddressRepository.html":{},"coverage.html":{}}}],["address.repositry.ts:15",{"_index":520,"title":{},"body":{"classes/DeliveryAddressRepository.html":{}}}],["address.repositry.ts:9",{"_index":521,"title":{},"body":{"classes/DeliveryAddressRepository.html":{}}}],["address.service",{"_index":494,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{}}}],["address.service.ts",{"_index":525,"title":{},"body":{"injectables/DeliveryAddressService.html":{},"coverage.html":{}}}],["address.service.ts:12",{"_index":530,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["address.service.ts:16",{"_index":531,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["address.service.ts:24",{"_index":528,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["address.service.ts:28",{"_index":532,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["address.service.ts:43",{"_index":529,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["address.service.ts:9",{"_index":527,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["address/delivery",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"classes/Order.html":{},"classes/User.html":{},"coverage.html":{}}}],["address/dto/create",{"_index":404,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{},"coverage.html":{}}}],["admin",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{}}}],["already",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"classes/UsersRepository.html":{}}}],["amazing",{"_index":930,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["apibearerauth()@useguards(undefined)@delete('/:id')@apiparam({name",{"_index":308,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductsController.html":{}}}],["apibearerauth()@useguards(undefined)@get('/admin/user')@apiokresponse({description",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibearerauth()@useguards(undefined)@patch('/:id')@apiparam({name",{"_index":324,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductsController.html":{}}}],["apibearerauth()@useguards(undefined)@post()@apicreatedresponse({description",{"_index":304,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/ProductsController.html":{}}}],["apicreatedresponse",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["apiokresponse",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiparam",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["apiproperty",{"_index":179,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{}}}],["apiproperty()@isstring()@minlength(8)@maxlength(16)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":183,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["apiresponse",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["apitags",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["apitags('auth",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('category",{"_index":334,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('delivery",{"_index":500,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["apitags('orders",{"_index":612,"title":{},"body":{"controllers/OrdersController.html":{}}}],["apitags('products",{"_index":697,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apiunauthorizedresponse",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["app",{"_index":907,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":900,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":23,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/UsersRepository.html":{}}}],["auth",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/user.entity",{"_index":463,"title":{},"body":{"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{}}}],["authcontroller",{"_index":72,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentialsdto",{"_index":112,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/UsersRepository.html":{},"coverage.html":{}}}],["authguard",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["authmodule",{"_index":29,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":940,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":134,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/UsersRepository.html":{}}}],["backers",{"_index":931,"title":{},"body":{"index.html":{}}}],["bad",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["bcrypt",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"classes/UsersRepository.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":815,"title":{},"body":{"classes/UsersRepository.html":{}}}],["bcrypt.hash(password",{"_index":817,"title":{},"body":{"classes/UsersRepository.html":{}}}],["body",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["bootstrap",{"_index":850,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":950,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":948,"title":{},"body":{"modules.html":{}}}],["building",{"_index":895,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":765,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["case",{"_index":191,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["catch",{"_index":822,"title":{},"body":{"classes/UsersRepository.html":{}}}],["category",{"_index":275,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateProductDto.html":{},"controllers/OrdersController.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["category.categoryname",{"_index":389,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.controller",{"_index":356,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.decorator",{"_index":611,"title":{},"body":{"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["category.decorator.ts",{"_index":846,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["category.dto",{"_index":331,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{}}}],["category.dto.ts",{"_index":398,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:8",{"_index":400,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.entity",{"_index":329,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{}}}],["category.products",{"_index":674,"title":{},"body":{"classes/Product.html":{}}}],["category.repository",{"_index":358,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["category.service",{"_index":333,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["category/category.entity",{"_index":447,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/OrdersController.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{}}}],["category/category.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["category/get",{"_index":610,"title":{},"body":{"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["categorycontroller",{"_index":295,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorymodule",{"_index":30,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryname",{"_index":277,"title":{},"body":{"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{}}}],["categoryrepository",{"_index":357,"title":{"classes/CategoryRepository.html":{}},"body":{"modules/CategoryModule.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"coverage.html":{}}}],["categoryservice",{"_index":332,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["character",{"_index":196,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["check",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["city",{"_index":407,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{},"classes/DeliveryAddress.html":{},"classes/DeliveryAddressRepository.html":{}}}],["class",{"_index":13,"title":{"classes/AuthCredentialsDto.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"classes/DeliveryAddressRepository.html":{},"classes/Order.html":{},"classes/OrdersRepository.html":{},"classes/Product.html":{},"classes/ProductsRepository.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":172,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"classes/DeliveryAddressRepository.html":{},"classes/Order.html":{},"classes/OrdersRepository.html":{},"classes/Product.html":{},"classes/ProductsRepository.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"overview.html":{}}}],["classtoplain",{"_index":769,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["classtoplain(data",{"_index":775,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["clone",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":352,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":354,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":353,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_deliveryaddressmodule",{"_index":511,"title":{},"body":{"modules/DeliveryAddressModule.html":{},"overview.html":{}}}],["cluster_deliveryaddressmodule_imports",{"_index":512,"title":{},"body":{"modules/DeliveryAddressModule.html":{}}}],["cluster_deliveryaddressmodule_providers",{"_index":513,"title":{},"body":{"modules/DeliveryAddressModule.html":{},"overview.html":{}}}],["cluster_ordersmodule",{"_index":623,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_imports",{"_index":624,"title":{},"body":{"modules/OrdersModule.html":{}}}],["cluster_ordersmodule_providers",{"_index":625,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":708,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_imports",{"_index":710,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cluster_productsmodule_providers",{"_index":709,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["code",{"_index":826,"title":{},"body":{"classes/UsersRepository.html":{}}}],["column",{"_index":280,"title":{},"body":{"classes/Category.html":{},"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["column({unique",{"_index":785,"title":{},"body":{"classes/User.html":{}}}],["conflict",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["conflictexception",{"_index":809,"title":{},"body":{"classes/UsersRepository.html":{}}}],["conflictexception('username",{"_index":829,"title":{},"body":{"classes/UsersRepository.html":{}}}],["console.log(error.code",{"_index":823,"title":{},"body":{"classes/UsersRepository.html":{}}}],["console.log(result",{"_index":394,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["const",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["constructor(@injectrepository(categoryrepository",{"_index":382,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(@injectrepository(deliveryaddressrepository",{"_index":533,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["constructor(@injectrepository(ordersrepository",{"_index":645,"title":{},"body":{"injectables/OrdersService.html":{}}}],["constructor(@injectrepository(productsrepository",{"_index":732,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(@injectrepository(usersrepository",{"_index":569,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(categoryrepository",{"_index":374,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(deliveryaddressrepository",{"_index":526,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["constructor(ordersrepository",{"_index":638,"title":{},"body":{"injectables/OrdersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["constructor(productsrepository",{"_index":724,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(usersrepository",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["contain",{"_index":188,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["context",{"_index":767,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('category",{"_index":335,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('delivery",{"_index":501,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["controller('orders",{"_index":613,"title":{},"body":{"controllers/OrdersController.html":{}}}],["controller('products",{"_index":698,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"overview.html":{}}}],["coverage",{"_index":832,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":818,"title":{},"body":{"classes/UsersRepository.html":{}}}],["createadmin",{"_index":802,"title":{},"body":{"classes/UsersRepository.html":{}}}],["createadmin(authcredentialsdto",{"_index":804,"title":{},"body":{"classes/UsersRepository.html":{}}}],["createcategory",{"_index":297,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{}}}],["createcategory(@body",{"_index":343,"title":{},"body":{"controllers/CategoryController.html":{}}}],["createcategory(createcategorydto",{"_index":302,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{}}}],["createcategorydto",{"_index":303,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcategorydto.categoryname",{"_index":390,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createdeliveryaddress",{"_index":474,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{}}}],["createdeliveryaddress(@body",{"_index":505,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["createdeliveryaddress(createdeliveryaddressdto",{"_index":479,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{}}}],["createdeliveryaddressdto",{"_index":402,"title":{"classes/CreateDeliveryAddressDto.html":{}},"body":{"classes/CreateDeliveryAddressDto.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"coverage.html":{}}}],["createdeliveryaddressdto.address",{"_index":544,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["createdeliveryaddressdto.city",{"_index":546,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["createdeliveryaddressdto.district",{"_index":548,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["createdeliveryaddressdto.fullname",{"_index":540,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["createdeliveryaddressdto.phoneno",{"_index":542,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["createdeliveryaddressdto.pincode",{"_index":552,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["createdeliveryaddressdto.state",{"_index":550,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["createorder",{"_index":590,"title":{},"body":{"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{}}}],["createorder(@body",{"_index":617,"title":{},"body":{"controllers/OrdersController.html":{}}}],["createorder(createorderdto",{"_index":595,"title":{},"body":{"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{}}}],["createorderdto",{"_index":420,"title":{"classes/CreateOrderDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["createorderdto.deliveryaddress",{"_index":661,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createorderdto.paymentmode",{"_index":658,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createorderdto.product",{"_index":660,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createorderdto.quantity",{"_index":652,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createorderdto.totalamount",{"_index":656,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createorderdto.totaldiscount",{"_index":654,"title":{},"body":{"injectables/OrdersService.html":{}}}],["createparamdecorator",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createproduct",{"_index":678,"title":{},"body":{"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{}}}],["createproduct(@body",{"_index":702,"title":{},"body":{"controllers/ProductsController.html":{}}}],["createproduct(createproductdto",{"_index":682,"title":{},"body":{"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{}}}],["createproductdto",{"_index":434,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createproductdto.description",{"_index":753,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproductdto.discount",{"_index":751,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproductdto.price",{"_index":750,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproductdto.pricewithdiscount",{"_index":752,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproductdto.title",{"_index":749,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createuser",{"_index":803,"title":{},"body":{"classes/UsersRepository.html":{}}}],["createuser(authcredentialsdto",{"_index":806,"title":{},"body":{"classes/UsersRepository.html":{}}}],["credentials",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["credentials.dto",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UsersRepository.html":{}}}],["credentials.dto.ts",{"_index":174,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:15",{"_index":202,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:18",{"_index":180,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:26",{"_index":201,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:6",{"_index":181,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:9",{"_index":182,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["ctx",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{}}}],["default",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{}}}],["delete",{"_index":327,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["delete('/:id",{"_index":349,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["delete('/:id')@apiparam({name",{"_index":483,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{}}}],["deletecategory",{"_index":298,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["deletecategory(@param('id",{"_index":350,"title":{},"body":{"controllers/CategoryController.html":{}}}],["deletecategory(id",{"_index":307,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["deletedeliveryaddress",{"_index":475,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"injectables/DeliveryAddressService.html":{}}}],["deletedeliveryaddress(@param('id",{"_index":509,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["deletedeliveryaddress(id",{"_index":482,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"injectables/DeliveryAddressService.html":{}}}],["deleteorder",{"_index":591,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["deleteorder(@param('id",{"_index":621,"title":{},"body":{"controllers/OrdersController.html":{}}}],["deleteorder(id",{"_index":597,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["deleteproduct",{"_index":679,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproduct(@param('id",{"_index":706,"title":{},"body":{"controllers/ProductsController.html":{}}}],["deleteproduct(id",{"_index":684,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["delivery",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"classes/Order.html":{},"classes/User.html":{}}}],["deliveryaddress",{"_index":423,"title":{"classes/DeliveryAddress.html":{}},"body":{"classes/CreateOrderDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"classes/Order.html":{},"classes/OrdersRepository.html":{},"classes/User.html":{},"coverage.html":{}}}],["deliveryaddress.address",{"_index":543,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["deliveryaddress.city",{"_index":545,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["deliveryaddress.district",{"_index":547,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["deliveryaddress.fullname",{"_index":539,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["deliveryaddress.order",{"_index":586,"title":{},"body":{"classes/Order.html":{}}}],["deliveryaddress.phoneno",{"_index":541,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["deliveryaddress.pincode",{"_index":551,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["deliveryaddress.state",{"_index":549,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["deliveryaddress.user",{"_index":799,"title":{},"body":{"classes/User.html":{}}}],["deliveryaddresscontroller",{"_index":472,"title":{"controllers/DeliveryAddressController.html":{}},"body":{"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"coverage.html":{}}}],["deliveryaddressmodule",{"_index":31,"title":{"modules/DeliveryAddressModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DeliveryAddressModule.html":{},"modules.html":{},"overview.html":{}}}],["deliveryaddressrepository",{"_index":516,"title":{"classes/DeliveryAddressRepository.html":{}},"body":{"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"coverage.html":{}}}],["deliveryaddressservice",{"_index":493,"title":{"injectables/DeliveryAddressService.html":{}},"body":{"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"injectables/DeliveryAddressService.html":{},"coverage.html":{},"overview.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/CreateProductDto.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"index.html":{}}}],["development",{"_index":908,"title":{},"body":{"index.html":{}}}],["discount",{"_index":437,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["district",{"_index":408,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{},"classes/DeliveryAddress.html":{},"classes/DeliveryAddressRepository.html":{}}}],["documentation",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["dto/auth",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UsersRepository.html":{}}}],["dto/create",{"_index":330,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{}}}],["dto/signin.dto",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":696,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["duplicate",{"_index":827,"title":{},"body":{"classes/UsersRepository.html":{}}}],["e2e",{"_index":919,"title":{},"body":{"index.html":{}}}],["eager",{"_index":287,"title":{},"body":{"classes/Category.html":{},"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["efficient",{"_index":896,"title":{},"body":{"index.html":{}}}],["email",{"_index":176,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/SignInDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{}}}],["entity",{"_index":289,"title":{},"body":{"classes/Category.html":{},"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["entityrepository",{"_index":366,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/DeliveryAddressRepository.html":{},"classes/OrdersRepository.html":{},"classes/ProductsRepository.html":{},"classes/UsersRepository.html":{}}}],["entityrepository(category",{"_index":367,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["entityrepository(deliveryaddress",{"_index":522,"title":{},"body":{"classes/DeliveryAddressRepository.html":{}}}],["entityrepository(order",{"_index":634,"title":{},"body":{"classes/OrdersRepository.html":{}}}],["entityrepository(product",{"_index":719,"title":{},"body":{"classes/ProductsRepository.html":{}}}],["entityrepository(user",{"_index":811,"title":{},"body":{"classes/UsersRepository.html":{}}}],["enumerations",{"_index":882,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["er_dup_entry",{"_index":825,"title":{},"body":{"classes/UsersRepository.html":{}}}],["error",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"classes/UsersRepository.html":{}}}],["error({message",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["error})'})@apiresponse({status",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["exclude",{"_index":464,"title":{},"body":{"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{}}}],["executioncontext",{"_index":763,"title":{},"body":{"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"classes/UsersRepository.html":{}}}],["expiresin",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{}}}],["exports",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["express",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":362,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/JwtStrategy.html":{},"classes/OrdersRepository.html":{},"classes/ProductsRepository.html":{},"classes/UsersRepository.html":{}}}],["extractjwt",{"_index":565,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":573,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":469,"title":{},"body":{"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{}}}],["false})@exclude({toplainonly",{"_index":460,"title":{},"body":{"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"coverage.html":{}}}],["firstname",{"_index":177,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{}}}],["flipkart",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":340,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/DeliveryAddressController.html":{},"injectables/DeliveryAddressService.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["found(message",{"_index":313,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["found)'})@apiunauthorizedresponse({description",{"_index":484,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["found)})@apiparam({name",{"_index":318,"title":{},"body":{"controllers/CategoryController.html":{}}}],["found)})@apiunauthorizedresponse({description",{"_index":314,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["framework",{"_index":894,"title":{},"body":{"index.html":{}}}],["fullname",{"_index":409,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{},"classes/DeliveryAddress.html":{},"classes/DeliveryAddressRepository.html":{}}}],["function",{"_index":849,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":888,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":338,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["get('/:id')@apiparam({name",{"_index":488,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"controllers/ProductsController.html":{}}}],["get('/:id')@apiresponse({status",{"_index":317,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/OrdersController.html":{}}}],["get('/admin/user",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apiresponse({status",{"_index":320,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["getcategory",{"_index":609,"title":{},"body":{"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcategorybyid",{"_index":299,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["getcategorybyid(@param('id",{"_index":341,"title":{},"body":{"controllers/CategoryController.html":{}}}],["getcategorybyid(id",{"_index":316,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["getcategorys",{"_index":300,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{}}}],["getdeliveryaddress",{"_index":476,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{}}}],["getdeliveryaddressbyid",{"_index":477,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"injectables/DeliveryAddressService.html":{}}}],["getdeliveryaddressbyid(@param('id",{"_index":503,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["getdeliveryaddressbyid(id",{"_index":487,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"injectables/DeliveryAddressService.html":{}}}],["gethello",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getorderbyid",{"_index":592,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["getorderbyid(@param('id",{"_index":615,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorderbyid(id",{"_index":599,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["getorders",{"_index":593,"title":{},"body":{"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{}}}],["getproductbyid",{"_index":723,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getproductbyid(id",{"_index":728,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getproducts",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{}}}],["getproductsbyid",{"_index":680,"title":{},"body":{"controllers/ProductsController.html":{}}}],["getproductsbyid(@param('id",{"_index":700,"title":{},"body":{"controllers/ProductsController.html":{}}}],["getproductsbyid(id",{"_index":687,"title":{},"body":{"controllers/ProductsController.html":{}}}],["getting",{"_index":890,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":497,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getusers",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"classes/UsersRepository.html":{}}}],["grow",{"_index":926,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":816,"title":{},"body":{"classes/UsersRepository.html":{}}}],["hello",{"_index":70,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":937,"title":{},"body":{"index.html":{}}}],["host",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["hour",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["https://nestjs.com",{"_index":944,"title":{},"body":{"index.html":{}}}],["id",{"_index":278,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"injectables/DeliveryAddressService.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/User.html":{}}}],["id'})@apiresponse({status",{"_index":309,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["id:string",{"_index":347,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["identifier",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["if(!found",{"_index":385,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["if(!user",{"_index":574,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["if(error.code",{"_index":824,"title":{},"body":{"classes/UsersRepository.html":{}}}],["if(result.affected",{"_index":395,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["if(user",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["implements",{"_index":772,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{}}}],["incrypt",{"_index":812,"title":{},"body":{"classes/UsersRepository.html":{}}}],["index",{"_index":76,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{}}}],["injectable",{"_index":67,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/TransformInterceptor.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["injectables",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"injectables/TransformInterceptor.html":{},"overview.html":{}}}],["injectrepository",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["injectrepository(usersrepository",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":904,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":906,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":761,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":762,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":555,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":556,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["internalservererrorexception",{"_index":810,"title":{},"body":{"classes/UsersRepository.html":{}}}],["isnotempty",{"_index":401,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["isnotempty()@apiproperty",{"_index":399,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{}}}],["isstring",{"_index":203,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["join",{"_index":933,"title":{},"body":{"index.html":{}}}],["juber",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":572,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":255,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":214,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":941,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":178,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{}}}],["letter",{"_index":192,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["license",{"_index":947,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":923,"title":{},"body":{"index.html":{}}}],["list",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["localhost",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["lower",{"_index":193,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["manytoone",{"_index":462,"title":{},"body":{"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{}}}],["manytoone((_type",{"_index":467,"title":{},"body":{"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{}}}],["manytoone(undefined",{"_index":459,"title":{},"body":{"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{}}}],["map",{"_index":770,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["matches",{"_index":204,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":210,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matching",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":199,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["maxlength(10",{"_index":207,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["maxlength(16",{"_index":209,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["message",{"_index":186,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["metadata",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UsersRepository.html":{}}}],["minlength",{"_index":197,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(4",{"_index":206,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(8",{"_index":208,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["miscellaneous",{"_index":881,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":922,"title":{},"body":{"index.html":{}}}],["mode",{"_index":912,"title":{},"body":{"index.html":{}}}],["module",{"_index":22,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{}}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":936,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":942,"title":{},"body":{"index.html":{}}}],["name",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UsersRepository.html":{}}}],["nest",{"_index":901,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":946,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":768,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UsersRepository.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/DeliveryAddressModule.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"dependencies.html":{}}}],["new",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"classes/UsersRepository.html":{},"coverage.html":{}}}],["next",{"_index":764,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":774,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["next:callhandler",{"_index":773,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["node.js",{"_index":893,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":381,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["notfoundexception(`category",{"_index":386,"title":{},"body":{"injectables/CategoryService.html":{}}}],["notfoundexception(`deliveryaddress",{"_index":536,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["notfoundexception(`order",{"_index":648,"title":{},"body":{"injectables/OrdersService.html":{}}}],["notfoundexception(`product",{"_index":735,"title":{},"body":{"injectables/ProductsService.html":{}}}],["npm",{"_index":905,"title":{},"body":{"index.html":{}}}],["number",{"_index":194,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/Order.html":{},"classes/Product.html":{},"classes/UpdateProductDto.html":{}}}],["ok",{"_index":321,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["ok'})@apiresponse({status",{"_index":311,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["ok'})@apiunauthorizedresponse({description",{"_index":305,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["ok({message",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["onetomany",{"_index":290,"title":{},"body":{"classes/Category.html":{},"classes/DeliveryAddress.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["onetomany((_type",{"_index":293,"title":{},"body":{"classes/Category.html":{},"classes/DeliveryAddress.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":285,"title":{},"body":{"classes/Category.html":{},"classes/DeliveryAddress.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["open",{"_index":924,"title":{},"body":{"index.html":{}}}],["optional",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UsersRepository.html":{}}}],["order",{"_index":449,"title":{"classes/Order.html":{}},"body":{"classes/DeliveryAddress.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"classes/User.html":{},"coverage.html":{}}}],["order.deliveryaddress",{"_index":471,"title":{},"body":{"classes/DeliveryAddress.html":{},"injectables/OrdersService.html":{}}}],["order.dto",{"_index":607,"title":{},"body":{"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{}}}],["order.dto.ts",{"_index":422,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["order.dto.ts:11",{"_index":433,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:15",{"_index":432,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:19",{"_index":429,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:23",{"_index":430,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:27",{"_index":428,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:7",{"_index":431,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.entity",{"_index":608,"title":{},"body":{"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{}}}],["order.paymentmode",{"_index":657,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.product",{"_index":659,"title":{},"body":{"injectables/OrdersService.html":{},"classes/Product.html":{}}}],["order.quantity",{"_index":651,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.totalamount",{"_index":655,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.totaldiscount",{"_index":653,"title":{},"body":{"injectables/OrdersService.html":{}}}],["order.user",{"_index":800,"title":{},"body":{"classes/User.html":{}}}],["orders",{"_index":589,"title":{},"body":{"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{}}}],["orders.controller",{"_index":627,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders.repository",{"_index":629,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["orders.service",{"_index":606,"title":{},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{}}}],["orders/order.entity",{"_index":466,"title":{},"body":{"classes/DeliveryAddress.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["orders/orders.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["orderscontroller",{"_index":587,"title":{"controllers/OrdersController.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"coverage.html":{}}}],["ordersmodule",{"_index":32,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["ordersrepository",{"_index":628,"title":{"classes/OrdersRepository.html":{}},"body":{"modules/OrdersModule.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["ordersservice",{"_index":605,"title":{"injectables/OrdersService.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["out",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"overview.html":{}}}],["overview",{"_index":951,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":855,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":328,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["parameters",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UsersRepository.html":{}}}],["passport",{"_index":567,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":564,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":568,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{}}}],["passwords",{"_index":187,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["patch",{"_index":326,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["patch('/:id",{"_index":345,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["patch('/:id')@apiparam({name",{"_index":491,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{}}}],["payload",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":558,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["paymentmode",{"_index":424,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/Order.html":{},"classes/OrdersRepository.html":{}}}],["phoneno",{"_index":410,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{},"classes/DeliveryAddress.html":{},"classes/DeliveryAddressRepository.html":{}}}],["pincode",{"_index":411,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{},"classes/DeliveryAddress.html":{},"classes/DeliveryAddressRepository.html":{}}}],["please",{"_index":934,"title":{},"body":{"index.html":{}}}],["port",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["post('/admin/signin",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/admin/signin')@apicreatedresponse({description",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/admin/signup",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/admin/signup')@apicreatedresponse({description",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/user/signin",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/user/signin')@apicreatedresponse({description",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/user/signup",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/user/signup')@apicreatedresponse({description",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apicreatedresponse({description",{"_index":480,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{}}}],["prefix",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["price",{"_index":438,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["pricewithdiscount",{"_index":439,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["primarygeneratedcolumn",{"_index":282,"title":{},"body":{"classes/Category.html":{},"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["private",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["product",{"_index":284,"title":{"classes/Product.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CreateOrderDto.html":{},"controllers/DeliveryAddressController.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/User.html":{},"coverage.html":{}}}],["product.category",{"_index":294,"title":{},"body":{"classes/Category.html":{},"injectables/ProductsService.html":{}}}],["product.description",{"_index":746,"title":{},"body":{"injectables/ProductsService.html":{}}}],["product.discount",{"_index":742,"title":{},"body":{"injectables/ProductsService.html":{}}}],["product.dto",{"_index":694,"title":{},"body":{"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{}}}],["product.dto.ts",{"_index":436,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:10",{"_index":780,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:12",{"_index":444,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:13",{"_index":779,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:16",{"_index":443,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts:19",{"_index":778,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:20",{"_index":445,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:22",{"_index":777,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:24",{"_index":442,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:28",{"_index":441,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:7",{"_index":781,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:8",{"_index":446,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.entity",{"_index":695,"title":{},"body":{"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{}}}],["product.order",{"_index":585,"title":{},"body":{"classes/Order.html":{}}}],["product.price",{"_index":740,"title":{},"body":{"injectables/ProductsService.html":{}}}],["product.pricewithdiscount",{"_index":744,"title":{},"body":{"injectables/ProductsService.html":{}}}],["product.title",{"_index":738,"title":{},"body":{"injectables/ProductsService.html":{}}}],["product.user",{"_index":798,"title":{},"body":{"classes/User.html":{}}}],["production",{"_index":914,"title":{},"body":{"index.html":{}}}],["products",{"_index":279,"title":{},"body":{"classes/Category.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"classes/UsersRepository.html":{}}}],["products.controller",{"_index":712,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.repository",{"_index":714,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["products.service",{"_index":693,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["products/product.entity",{"_index":292,"title":{},"body":{"classes/Category.html":{},"classes/Order.html":{},"classes/User.html":{}}}],["products/products.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":676,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":33,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsrepository",{"_index":713,"title":{"classes/ProductsRepository.html":{}},"body":{"modules/ProductsModule.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["productsservice",{"_index":692,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":892,"title":{},"body":{"index.html":{}}}],["project",{"_index":925,"title":{},"body":{"index.html":{}}}],["promise",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/UsersRepository.html":{}}}],["properties",{"_index":175,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"interfaces/JwtPayload.html":{},"classes/Order.html":{},"classes/Product.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{}}}],["providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{}}}],["quantity",{"_index":425,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/Order.html":{},"classes/OrdersRepository.html":{}}}],["query",{"_index":368,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/DeliveryAddressRepository.html":{},"classes/OrdersRepository.html":{},"classes/ProductsRepository.html":{},"classes/UsersRepository.html":{}}}],["query.getmany",{"_index":370,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/DeliveryAddressRepository.html":{},"classes/OrdersRepository.html":{},"classes/ProductsRepository.html":{},"classes/UsersRepository.html":{}}}],["read",{"_index":935,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["reflect",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":363,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/DeliveryAddressRepository.html":{},"classes/OrdersRepository.html":{},"classes/ProductsRepository.html":{},"classes/UsersRepository.html":{},"index.html":{}}}],["req",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.category",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request({message",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"overview.html":{}}}],["resource",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":392,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{}}}],["results",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UsersRepository.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["returned'})@apiunauthorizedresponse({description",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["returns",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UsersRepository.html":{}}}],["rimraf",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":783,"title":{},"body":{"classes/User.html":{},"classes/UsersRepository.html":{}}}],["role.enum",{"_index":796,"title":{},"body":{"classes/User.html":{},"classes/UsersRepository.html":{}}}],["role.enum.ts",{"_index":884,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":909,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["rxjs/operators",{"_index":771,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["salt",{"_index":814,"title":{},"body":{"classes/UsersRepository.html":{}}}],["scalable",{"_index":897,"title":{},"body":{"index.html":{}}}],["seconds",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["secret",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":571,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":898,"title":{},"body":{"index.html":{}}}],["side",{"_index":899,"title":{},"body":{"index.html":{}}}],["signin",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(@body",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinadmin",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinadmin(@body",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinadmin(signindto",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto",{"_index":96,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signin})'})@apiunauthorizedresponse({description",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["signoptions",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(authcredentialsdto",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupadmin",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupadmin(@body",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupadmin(authcredentialsdto",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup})'})@apiresponse({status",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["singin",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["singin(signindto",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["singinadmin",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["singinadmin(signindto",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"index.html":{}}}],["special",{"_index":195,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["sponsors",{"_index":928,"title":{},"body":{"index.html":{}}}],["src/.../get",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":889,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user",{"_index":883,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":69,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:25",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:50",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":359,"title":{},"body":{"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{}}}],["src/auth/auth.module.ts",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:39",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth",{"_index":173,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/signin.dto.ts",{"_index":756,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dto/signin.dto.ts:6",{"_index":757,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dto/signin.dto.ts:9",{"_index":758,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/get",{"_index":498,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":557,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":559,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":561,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:18",{"_index":563,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/user",{"_index":885,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/user.entity.ts",{"_index":782,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/auth/user.entity.ts:10",{"_index":788,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:13",{"_index":787,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:16",{"_index":789,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:19",{"_index":795,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:22",{"_index":786,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:25",{"_index":791,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:28",{"_index":794,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:31",{"_index":792,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:34",{"_index":784,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:37",{"_index":790,"title":{},"body":{"classes/User.html":{}}}],["src/auth/users.repository.ts",{"_index":801,"title":{},"body":{"classes/UsersRepository.html":{},"coverage.html":{}}}],["src/auth/users.repository.ts:34",{"_index":805,"title":{},"body":{"classes/UsersRepository.html":{}}}],["src/auth/users.repository.ts:58",{"_index":808,"title":{},"body":{"classes/UsersRepository.html":{}}}],["src/auth/users.repository.ts:9",{"_index":807,"title":{},"body":{"classes/UsersRepository.html":{}}}],["src/category/category.controller.ts",{"_index":296,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/category/category.controller.ts:16",{"_index":322,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:24",{"_index":319,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:33",{"_index":306,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:44",{"_index":325,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:55",{"_index":315,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.entity.ts",{"_index":276,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/category/category.entity.ts:12",{"_index":288,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:6",{"_index":283,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:9",{"_index":281,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.module.ts",{"_index":355,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/category/category.repository.ts",{"_index":361,"title":{},"body":{"classes/CategoryRepository.html":{},"coverage.html":{}}}],["src/category/category.repository.ts:14",{"_index":364,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/category/category.repository.ts:8",{"_index":365,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/category/category.service.ts",{"_index":373,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/category/category.service.ts:11",{"_index":379,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:15",{"_index":378,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:23",{"_index":376,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:27",{"_index":380,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:34",{"_index":377,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:7",{"_index":375,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/dto/create",{"_index":397,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/category/get",{"_index":845,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/delivery",{"_index":403,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"modules/DeliveryAddressModule.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":848,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/orders/dto/create",{"_index":421,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts",{"_index":575,"title":{},"body":{"classes/Order.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts:10",{"_index":577,"title":{},"body":{"classes/Order.html":{}}}],["src/orders/order.entity.ts:13",{"_index":580,"title":{},"body":{"classes/Order.html":{}}}],["src/orders/order.entity.ts:16",{"_index":582,"title":{},"body":{"classes/Order.html":{}}}],["src/orders/order.entity.ts:19",{"_index":581,"title":{},"body":{"classes/Order.html":{}}}],["src/orders/order.entity.ts:22",{"_index":578,"title":{},"body":{"classes/Order.html":{}}}],["src/orders/order.entity.ts:26",{"_index":583,"title":{},"body":{"classes/Order.html":{}}}],["src/orders/order.entity.ts:30",{"_index":579,"title":{},"body":{"classes/Order.html":{}}}],["src/orders/order.entity.ts:34",{"_index":576,"title":{},"body":{"classes/Order.html":{}}}],["src/orders/orders.controller.ts",{"_index":588,"title":{},"body":{"controllers/OrdersController.html":{},"coverage.html":{}}}],["src/orders/orders.controller.ts:22",{"_index":602,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:31",{"_index":601,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:38",{"_index":596,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:48",{"_index":604,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:57",{"_index":598,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.module.ts",{"_index":626,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/orders/orders.repository.ts",{"_index":631,"title":{},"body":{"classes/OrdersRepository.html":{},"coverage.html":{}}}],["src/orders/orders.repository.ts:15",{"_index":632,"title":{},"body":{"classes/OrdersRepository.html":{}}}],["src/orders/orders.repository.ts:9",{"_index":633,"title":{},"body":{"classes/OrdersRepository.html":{}}}],["src/orders/orders.service.ts",{"_index":637,"title":{},"body":{"injectables/OrdersService.html":{},"coverage.html":{}}}],["src/orders/orders.service.ts:12",{"_index":643,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:16",{"_index":642,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:24",{"_index":640,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:28",{"_index":644,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:42",{"_index":641,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/orders.service.ts:9",{"_index":639,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/products/dto/create",{"_index":435,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dto/update",{"_index":776,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/products/product.entity.ts",{"_index":664,"title":{},"body":{"classes/Product.html":{},"coverage.html":{}}}],["src/products/product.entity.ts:10",{"_index":668,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:13",{"_index":672,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:16",{"_index":670,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:19",{"_index":667,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:22",{"_index":671,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:25",{"_index":666,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:29",{"_index":665,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:33",{"_index":673,"title":{},"body":{"classes/Product.html":{}}}],["src/products/product.entity.ts:36",{"_index":669,"title":{},"body":{"classes/Product.html":{}}}],["src/products/products.controller.ts",{"_index":677,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:21",{"_index":686,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:29",{"_index":688,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:38",{"_index":683,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:49",{"_index":691,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:60",{"_index":685,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module.ts",{"_index":711,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/products.repository.ts",{"_index":716,"title":{},"body":{"classes/ProductsRepository.html":{},"coverage.html":{}}}],["src/products/products.repository.ts:10",{"_index":718,"title":{},"body":{"classes/ProductsRepository.html":{}}}],["src/products/products.repository.ts:16",{"_index":717,"title":{},"body":{"classes/ProductsRepository.html":{}}}],["src/products/products.service.ts",{"_index":722,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/products.service.ts:11",{"_index":725,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:15",{"_index":730,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:19",{"_index":729,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:27",{"_index":726,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:31",{"_index":731,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/products.service.ts:53",{"_index":727,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/transform.interceptor.ts",{"_index":760,"title":{},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/transform.interceptor.ts:7",{"_index":766,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["start",{"_index":910,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":913,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":915,"title":{},"body":{"index.html":{}}}],["started",{"_index":891,"title":{"index.html":{}},"body":{}}],["starter",{"_index":903,"title":{},"body":{"index.html":{}}}],["state",{"_index":412,"title":{},"body":{"classes/CreateDeliveryAddressDto.html":{},"classes/DeliveryAddress.html":{},"classes/DeliveryAddressRepository.html":{}}}],["statements",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["status:200",{"_index":336,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["status:400",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["status:401",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["status:404",{"_index":339,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["status:409",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["stay",{"_index":938,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":566,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"injectables/DeliveryAddressService.html":{},"interfaces/JwtPayload.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{}}}],["successfully",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":570,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":887,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["support",{"_index":929,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":949,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":853,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":918,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":921,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":920,"title":{},"body":{"index.html":{}}}],["tests",{"_index":917,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":927,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.getusers",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(authcredentialsdto",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupadmin(authcredentialsdto",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.singin(signindto",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.singinadmin(signindto",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.categoryrepository.createcategory(createcategorydto",{"_index":387,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.delete",{"_index":393,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.findone",{"_index":384,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.getcategorys",{"_index":383,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.save(category",{"_index":391,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.createcategory(createcategorydto",{"_index":344,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.deletecategory(id",{"_index":351,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.getcategorybyid(id",{"_index":342,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.getcategorys",{"_index":337,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.updatecategory(id",{"_index":348,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.create",{"_index":371,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/DeliveryAddressRepository.html":{},"classes/OrdersRepository.html":{},"classes/ProductsRepository.html":{},"classes/UsersRepository.html":{}}}],["this.createquerybuilder('category",{"_index":369,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["this.createquerybuilder('deliveryaddress",{"_index":523,"title":{},"body":{"classes/DeliveryAddressRepository.html":{}}}],["this.createquerybuilder('order",{"_index":635,"title":{},"body":{"classes/OrdersRepository.html":{}}}],["this.createquerybuilder('product",{"_index":720,"title":{},"body":{"classes/ProductsRepository.html":{}}}],["this.createquerybuilder('user",{"_index":831,"title":{},"body":{"classes/UsersRepository.html":{}}}],["this.deliveryaddressrepository.createdeliveryaddress(createdeliveryaddressdto",{"_index":537,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["this.deliveryaddressrepository.delete",{"_index":554,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["this.deliveryaddressrepository.findone",{"_index":535,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["this.deliveryaddressrepository.getdeliveryaddress",{"_index":534,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["this.deliveryaddressrepository.save(deliveryaddress",{"_index":553,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["this.deliveryaddressservice.createdeliveryaddress(createdeliveryaddressdto",{"_index":506,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["this.deliveryaddressservice.deletedeliveryaddress(id",{"_index":510,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["this.deliveryaddressservice.getdeliveryaddress",{"_index":502,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["this.deliveryaddressservice.getdeliveryaddressbyid(id",{"_index":504,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["this.deliveryaddressservice.updatedeliveryaddress(id",{"_index":508,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["this.getcategorybyid(id",{"_index":388,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.getdeliveryaddressbyid(id",{"_index":538,"title":{},"body":{"injectables/DeliveryAddressService.html":{}}}],["this.getorderbyid(id",{"_index":650,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.getproductbyid(id",{"_index":737,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.jwtservice.sign(payload",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ordersrepository.createorder(createorderdto",{"_index":649,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.ordersrepository.delete",{"_index":663,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.ordersrepository.findone",{"_index":647,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.ordersrepository.getorders",{"_index":646,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.ordersrepository.save(order",{"_index":662,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.ordersservice.createorder(createorderdto",{"_index":618,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.deleteorder(id",{"_index":622,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.getorderbyid(id",{"_index":616,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.getorders",{"_index":614,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.updateorder(id",{"_index":620,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.productsrepository.createproduct(createproductdto",{"_index":736,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.delete",{"_index":755,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.findone",{"_index":734,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.getproducts",{"_index":733,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsrepository.save(product",{"_index":754,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.createproduct(createproductdto",{"_index":703,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.deleteproduct(id",{"_index":707,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getproductbyid(id",{"_index":701,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getproducts",{"_index":699,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.updateproduct(id",{"_index":705,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.save(category",{"_index":372,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["this.save(deliveryaddress",{"_index":524,"title":{},"body":{"classes/DeliveryAddressRepository.html":{}}}],["this.save(order",{"_index":636,"title":{},"body":{"classes/OrdersRepository.html":{}}}],["this.save(product",{"_index":721,"title":{},"body":{"classes/ProductsRepository.html":{}}}],["this.save(user",{"_index":821,"title":{},"body":{"classes/UsersRepository.html":{}}}],["this.usersrepository.createadmin(authcredentialsdto",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.createuser(authcredentialsdto",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.findone",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersrepository.getusers",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"injectables/OrdersService.html":{},"injectables/ProductsService.html":{},"classes/UsersRepository.html":{}}}],["title",{"_index":440,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{}}}],["token",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["toplainonly",{"_index":470,"title":{},"body":{"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{}}}],["topsecret51",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["totalamount",{"_index":426,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/Order.html":{},"classes/OrdersRepository.html":{}}}],["totaldiscount",{"_index":427,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/Order.html":{},"classes/OrdersRepository.html":{}}}],["touch",{"_index":939,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":465,"title":{},"body":{"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":759,"title":{"injectables/TransformInterceptor.html":{}},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"classes/Category.html":{},"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["try",{"_index":820,"title":{},"body":{"classes/UsersRepository.html":{}}}],["twitter",{"_index":945,"title":{},"body":{"index.html":{}}}],["type",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryRepository.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateProductDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"coverage.html":{}}}],["typeorm",{"_index":291,"title":{},"body":{"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/DeliveryAddress.html":{},"classes/DeliveryAddressRepository.html":{},"classes/Order.html":{},"classes/OrdersRepository.html":{},"classes/Product.html":{},"classes/ProductsRepository.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([categoryrepository",{"_index":360,"title":{},"body":{"modules/CategoryModule.html":{}}}],["typeormmodule.forfeature([deliveryaddressrepository",{"_index":518,"title":{},"body":{"modules/DeliveryAddressModule.html":{}}}],["typeormmodule.forfeature([ordersrepository",{"_index":630,"title":{},"body":{"modules/OrdersModule.html":{}}}],["typeormmodule.forfeature([productsrepository",{"_index":715,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([usersrepository",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forroot",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":902,"title":{},"body":{"index.html":{}}}],["ubuntu",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["unauthorized({message",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('please",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":286,"title":{},"body":{"classes/Category.html":{},"classes/DeliveryAddress.html":{},"classes/Order.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["unique",{"_index":797,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":916,"title":{},"body":{"index.html":{}}}],["updatecategory",{"_index":301,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["updatecategory(@param('id",{"_index":346,"title":{},"body":{"controllers/CategoryController.html":{}}}],["updatecategory(id",{"_index":323,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["updatedeliveryaddress",{"_index":478,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"injectables/DeliveryAddressService.html":{}}}],["updatedeliveryaddress(@param('id",{"_index":507,"title":{},"body":{"controllers/DeliveryAddressController.html":{}}}],["updatedeliveryaddress(id",{"_index":490,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"injectables/DeliveryAddressService.html":{}}}],["updateorder",{"_index":594,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["updateorder(@param('id",{"_index":619,"title":{},"body":{"controllers/OrdersController.html":{}}}],["updateorder(id",{"_index":603,"title":{},"body":{"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["updateproduct",{"_index":681,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["updateproduct(@param('id",{"_index":704,"title":{},"body":{"controllers/ProductsController.html":{}}}],["updateproduct(id",{"_index":689,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["updateproductdto",{"_index":690,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateproductdto.category",{"_index":748,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductdto.description",{"_index":747,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductdto.discount",{"_index":743,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductdto.price",{"_index":741,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductdto.pricewithdiscount",{"_index":745,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductdto.title",{"_index":739,"title":{},"body":{"injectables/ProductsService.html":{}}}],["upper",{"_index":190,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["useguards",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["useguards(authguard",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["user",{"_index":90,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"classes/DeliveryAddress.html":{},"controllers/DeliveryAddressController.html":{},"classes/DeliveryAddressRepository.html":{},"injectables/DeliveryAddressService.html":{},"injectables/JwtStrategy.html":{},"classes/Order.html":{},"controllers/OrdersController.html":{},"classes/OrdersRepository.html":{},"injectables/OrdersService.html":{},"classes/Product.html":{},"controllers/ProductsController.html":{},"classes/ProductsRepository.html":{},"injectables/ProductsService.html":{},"classes/User.html":{},"classes/UsersRepository.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiparam({name",{"_index":600,"title":{},"body":{"controllers/OrdersController.html":{}}}],["user.decorator",{"_index":499,"title":{},"body":{"controllers/DeliveryAddressController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{}}}],["user.decorator.ts",{"_index":840,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.deliveryaddress",{"_index":468,"title":{},"body":{"classes/DeliveryAddress.html":{}}}],["user.entity",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UsersRepository.html":{}}}],["user.order",{"_index":584,"title":{},"body":{"classes/Order.html":{}}}],["user.password",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.product",{"_index":675,"title":{},"body":{"classes/Product.html":{}}}],["username",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthCredentialsDto.html":{},"classes/User.html":{},"classes/UsersRepository.html":{}}}],["username(generate",{"_index":828,"title":{},"body":{"classes/UsersRepository.html":{}}}],["userrole",{"_index":793,"title":{},"body":{"classes/User.html":{},"classes/UsersRepository.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":830,"title":{},"body":{"classes/UsersRepository.html":{}}}],["userrole.user",{"_index":819,"title":{},"body":{"classes/UsersRepository.html":{}}}],["users.repository",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["usersrepository",{"_index":218,"title":{"classes/UsersRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UsersRepository.html":{},"coverage.html":{}}}],["using",{"_index":813,"title":{},"body":{"classes/UsersRepository.html":{}}}],["validate",{"_index":560,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":562,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validation",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["validator",{"_index":205,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateDeliveryAddressDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"dependencies.html":{}}}],["value",{"_index":886,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":954,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":911,"title":{},"body":{"index.html":{}}}],["website",{"_index":943,"title":{},"body":{"index.html":{}}}],["world",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":932,"title":{},"body":{"index.html":{}}}],["z",{"_index":185,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["z])(?=.*[a",{"_index":184,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["zoom",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/DeliveryAddressModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nDeliveryAddressModule\n\nDeliveryAddressModule\n\nAppModule -->\n\nDeliveryAddressModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            DeliveryAddressModule\n                        \n                        \n                            OrdersModule\n                        \n                        \n                            ProductsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from './auth/auth.module';\nimport { ProductsModule } from './products/products.module';\nimport { CategoryModule } from './category/category.module';\nimport { DeliveryAddressModule } from './delivery-address/delivery-address.module';\nimport { OrdersModule } from './orders/orders.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      username: 'juber',\n      password: 'ubuntu',\n      database: 'flipkart-clone',\n      autoLoadEntities: true,\n      synchronize: true,\n    }),\n    AuthModule,\n    ProductsModule,\n    CategoryModule,\n    DeliveryAddressModule,\n    OrdersModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  // getHello(): string {\n  //   return 'Hello World!';\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProducts\n                            \n                            \n                                signIn\n                            \n                            \n                                signInAdmin\n                            \n                            \n                                signUp\n                            \n                            \n                                signUpAdmin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getProducts\n                        \n                    \n                \n            \n            \n                \ngetProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(undefined)@Get('/admin/user')@ApiOkResponse({description: 'The resource list have been successfully returned'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signIn\n                        \n                    \n                \n            \n            \n                \nsignIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/user/signin')@ApiCreatedResponse({description: 'Ok({message: User signIn})'})@ApiUnauthorizedResponse({description: 'Unauthorized({message: Check your login credentials})'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signInAdmin\n                        \n                    \n                \n            \n            \n                \nsignInAdmin(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/admin/signin')@ApiCreatedResponse({description: 'Ok({message: User signIn})'})@ApiUnauthorizedResponse({description: 'Unauthorized({message: Check your login credentials})'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUp\n                        \n                    \n                \n            \n            \n                \nsignUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/user/signup')@ApiCreatedResponse({description: 'Ok({message: User signUp})'})@ApiResponse({status: 400, description: 'Bad request({message: Validation Error})'})@ApiResponse({status: 409, description: 'Conflict error({message: User is already exists})'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpAdmin\n                        \n                    \n                \n            \n            \n                \nsignUpAdmin(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/admin/signup')@ApiCreatedResponse({description: 'Ok({message: Admin signUp})'})@ApiResponse({status: 400, description: 'Bad request({message: Validation Error})'})@ApiResponse({status: 409, description: 'Conflict error({message: User is already exists})'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Post, Get, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { ApiParam, ApiTags, ApiBearerAuth, ApiCreatedResponse , ApiResponse, ApiOkResponse, ApiUnauthorizedResponse} from '@nestjs/swagger';\nimport { User } from './user.entity';\nimport { AuthGuard } from '@nestjs/passport';\nimport { SignInDto } from './dto/signIn.dto';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n    constructor(private authService: AuthService) {}\n\n  @Post('/user/signup')\n  @ApiCreatedResponse({ description: 'Ok({message: User signUp})'})\n  @ApiResponse({ status:400, description: 'Bad request({message: Validation Error})' })\n  @ApiResponse({ status:409, description: 'Conflict error({message: User is already exists})' })\n  signUp(@Body() authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.authService.signUp(authCredentialsDto);\n  }\n\n  @Post('/user/signin')\n  @ApiCreatedResponse({ description: 'Ok({message: User signIn})'})\n  @ApiUnauthorizedResponse({ description: 'Unauthorized({message: Check your login credentials})' })\n  signIn(@Body() signInDto: SignInDto): Promise {\n    return this.authService.singIn(signInDto);\n  }\n\n  @Post('/admin/signup')\n  @ApiCreatedResponse({ description: 'Ok({message: Admin signUp})'})\n  @ApiResponse({ status:400, description: 'Bad request({message: Validation Error})' })\n  @ApiResponse({ status:409, description: 'Conflict error({message: User is already exists})' })\n  signUpAdmin(@Body() authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.authService.signUpAdmin(authCredentialsDto);\n  }\n\n  @Post('/admin/signin')\n  @ApiCreatedResponse({ description: 'Ok({message: User signIn})'})\n  @ApiUnauthorizedResponse({ description: 'Unauthorized({message: Check your login credentials})' })\n  signInAdmin(@Body() signInDto: SignInDto): Promise {\n    return this.authService.singInAdmin(signInDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard())\n  @Get('/admin/user')\n  @ApiOkResponse({ description: 'The resource list have been successfully returned'})\n  // @ApiResponse({ status:401, description: 'Unauthorized User' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  getProducts(): Promise {\n    return this.authService.getUsers();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-credentials.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-credentials.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-credentials.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(8)@MaxLength(16)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Passwords will contain at least 1 upper case letter, at least 1 lower case letter, at least 1 number or special character, MinLength 8 and MaxLength 16'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-credentials.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth-credentials.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, Matches, MaxLength, MinLength } from \"class-validator\";\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthCredentialsDto {\n  @ApiProperty()\n  firstname: string;\n\n  @ApiProperty()\n  lastname: string;\n\n  @ApiProperty()\n  // @IsString()\n  // @MinLength(4)\n  // @MaxLength(10)\n  username: string;\n\n  @ApiProperty()\n  email: string;\n\n  @ApiProperty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(16)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/,\n    {message: 'Passwords will contain at least 1 upper case letter, at least 1 lower case letter, at least 1 number or special character, MinLength 8 and MaxLength 16'})\n  password: string;\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { UsersRepository } from './users.repository'\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy'\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UsersRepository]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: 'topSecret51',\n      signOptions: {\n        expiresIn: 3600,   //3600 seconds = 1 hour\n      }\n    })\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [JwtStrategy, PassportModule]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getUsers\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                signUpAdmin\n                            \n                            \n                                    Async\n                                singIn\n                            \n                            \n                                    Async\n                                singInAdmin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: UsersRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUpAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUpAdmin(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        singIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    singIn(signInDto: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        singInAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    singInAdmin(signInDto: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { UsersRepository } from './users.repository';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { User } from './user.entity'\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtPayload } from './jwt-payload.interface'\nimport { SignInDto } from './dto/signIn.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(UsersRepository)\n    private usersRepository: UsersRepository,\n    private jwtService: JwtService,\n  ) {}\n\n  //User Login\n  async signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.usersRepository.createUser(authCredentialsDto);\n  }\n\n  async singIn(signInDto: SignInDto): Promise {\n    const { email, password } = signInDto;\n    const user = await this.usersRepository.findOne({ email });\n\n    if(user && (await bcrypt.compare(password, user.password))) {\n      //JWT Token\n      const payload: JwtPayload = { email };\n      const accessToken: string = await this.jwtService.sign(payload);\n      return { accessToken };\n    } else {\n      throw new UnauthorizedException('Please check your login credentials');\n    }\n  }\n\n  //Admin Login\n  async signUpAdmin(authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.usersRepository.createAdmin(authCredentialsDto);\n  }\n\n  async singInAdmin(signInDto: SignInDto): Promise {\n    const { email, password } = signInDto;\n    const user = await this.usersRepository.findOne({ email });\n\n    if(user && (await bcrypt.compare(password, user.password))) {\n      //JWT Token\n      const payload: JwtPayload = { email };\n      const accessToken: string = await this.jwtService.sign(payload);\n      return { accessToken };\n    } else {\n      throw new UnauthorizedException('Please check your login credentials');\n    }\n  }\n\n  getUsers(): Promise {\n      return this.usersRepository.getUsers();\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                categoryname\n                            \n                            \n                                id\n                            \n                            \n                                products\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        categoryname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/category.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/category.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/category.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\nimport { Product } from '../products/product.entity'\n@Entity()\nexport class Category {\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @Column()\n  categoryname: string;\n\n  @OneToMany((_type) => Product, (product) => product.category, { eager: true })\n  products: Product[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createCategory\n                            \n                            \n                                deleteCategory\n                            \n                            \n                                getCategoryById\n                            \n                            \n                                getCategorys\n                            \n                            \n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCategory\n                        \n                    \n                \n            \n            \n                \ncreateCategory(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(undefined)@Post()@ApiCreatedResponse({description: 'Ok'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \ndeleteCategory(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(undefined)@Delete('/:id')@ApiParam({name: 'id'})@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: Not found(message: Product with this id not found)})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \ngetCategoryById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: Not found(message: Product with this id not found)})@ApiParam({name: 'id'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategorys\n                        \n                    \n                \n            \n            \n                \ngetCategorys()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: 200, description: 'Ok'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateCategory\n                        \n                    \n                \n            \n            \n                \nupdateCategory(id: string, createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(undefined)@Patch('/:id')@ApiParam({name: 'id'})@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: Not found(message: Product with this id not found)})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Delete, Body, Param, UseGuards } from '@nestjs/common';\nimport { Category } from './category.entity';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { CategoryService } from './category.service';\nimport { ApiParam, ApiTags, ApiBearerAuth, ApiUnauthorizedResponse, ApiResponse, ApiCreatedResponse } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\n\n@ApiTags('category')\n@Controller('category')\nexport class CategoryController {\n\n  constructor(private categoryService: CategoryService) {}\n\n  @Get()\n  @ApiResponse({ status:200, description: 'Ok' })\n  getCategorys(): Promise {\n    return this.categoryService.getCategorys();\n  }\n\n  @Get('/:id')\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: `Not found(message: Product with this id not found)` })\n  @ApiParam({ name: 'id' })\n  getCategoryById(@Param('id') id: string): Promise {\n    return this.categoryService.getCategoryById(id);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard())\n  @Post()\n  @ApiCreatedResponse({ description: 'Ok'})\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  createCategory(@Body() createCategoryDto: CreateCategoryDto): Promise {\n    return this.categoryService.createCategory(createCategoryDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard())\n  @Patch('/:id')\n  @ApiParam({ name: 'id' })\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: `Not found(message: Product with this id not found)` })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  updateCategory(@Param('id') id:string, @Body() createCategoryDto: CreateCategoryDto): Promise {\n    return this.categoryService.updateCategory(id, createCategoryDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard())\n  @Delete('/:id')\n  @ApiParam({ name: 'id' })\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: `Not found(message: Product with this id not found)` })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  deleteCategory(@Param('id') id:string): Promise {\n    return this.categoryService.deleteCategory(id);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CategoryModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nAuthModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryController } from './category.controller';\nimport { CategoryService } from './category.service';\nimport { CategoryRepository } from './category.repository'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([CategoryRepository]), AuthModule],\n  controllers: [CategoryController],\n  providers: [CategoryService]\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryRepository.html":{"url":"classes/CategoryRepository.html","title":"class - CategoryRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                getCategorys\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.repository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCategorys\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategorys()\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.repository.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { Category } from './category.entity';\nimport { CreateCategoryDto } from './dto/create-category.dto';\n\n@EntityRepository(Category)\nexport class CategoryRepository extends Repository {\n\n  async getCategorys(): Promise {\n    const query = this.createQueryBuilder('category');\n    const category = await query.getMany();\n    return category;\n  }\n\n  async createCategory(createCategoryDto: CreateCategoryDto): Promise {\n    const { categoryname } = createCategoryDto;\n    const category = this.create({ categoryname })\n    await this.save(category);\n    return category;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                    Async\n                                getCategoryById\n                            \n                            \n                                getCategorys\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: CategoryRepository)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        CategoryRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCategory\n                        \n                    \n                \n            \n            \n                \ncreateCategory(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategoryById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategorys\n                        \n                    \n                \n            \n            \n                \ngetCategorys()\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(id: string, createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Category } from './category.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { CategoryRepository } from './category.repository'\n@Injectable()\nexport class CategoryService {\n\n  constructor(@InjectRepository(CategoryRepository) private categoryRepository: CategoryRepository) {}\n\n  getCategorys(): Promise {\n      return this.categoryRepository.getCategorys();\n  }\n\n  async getCategoryById(id: string): Promise {\n    const found = await this.categoryRepository.findOne({ where: { id }});\n    if(!found) {\n      throw new NotFoundException(`Category with ID ${id} not found`);\n    }\n    return found;\n  }\n\n  createCategory (createCategoryDto: CreateCategoryDto): Promise {\n      return this.categoryRepository.createCategory(createCategoryDto);\n  }\n\n  async updateCategory(id: string, createCategoryDto: CreateCategoryDto): Promise {\n    const category = await this.getCategoryById(id);\n    category.categoryname = createCategoryDto.categoryname;\n    await this.categoryRepository.save(category);\n    return category;\n  }\n\n  async deleteCategory(id: string): Promise {\n    const result = await this.categoryRepository.delete({ id });\n    console.log(result);\n    if(result.affected === 0) {\n      throw new NotFoundException(`Category with ID ${id} not found`)\n    }\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                categoryname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        categoryname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/dto/create-category.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateCategoryDto{\n\n  @IsNotEmpty()\n  @ApiProperty()\n  categoryname: string;\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDeliveryAddressDto.html":{"url":"classes/CreateDeliveryAddressDto.html","title":"class - CreateDeliveryAddressDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDeliveryAddressDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/delivery-address/dto/create-address.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                city\n                            \n                            \n                                district\n                            \n                            \n                                fullname\n                            \n                            \n                                phoneno\n                            \n                            \n                                pincode\n                            \n                            \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/dto/create-address.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/dto/create-address.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        district\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/dto/create-address.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/dto/create-address.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneno\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/dto/create-address.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pincode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/dto/create-address.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/dto/create-address.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateDeliveryAddressDto {\n  @IsNotEmpty()\n  @ApiProperty()\n  fullname: string;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  phoneno: string;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  address: string;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  city: string;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  district: string;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  state: string;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  pincode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dto/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                deliveryAddress\n                            \n                            \n                                paymentMode\n                            \n                            \n                                product\n                            \n                            \n                                quantity\n                            \n                            \n                                totalAmount\n                            \n                            \n                                totalDiscount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        deliveryAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalDiscount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dto/create-order.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateOrderDto {\n  @IsNotEmpty()\n  @ApiProperty()\n  quantity: number;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  totalDiscount: number;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  totalAmount: number;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  paymentMode: string;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  product: number;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  deliveryAddress: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                description\n                            \n                            \n                                discount\n                            \n                            \n                                price\n                            \n                            \n                                priceWithDiscount\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        discount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        priceWithDiscount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/create-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Category } from '../../category/category.entity';\n\nexport class CreateProductDto {\n  @IsNotEmpty()\n  @ApiProperty()\n  title: string;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  price: number;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  discount: number;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  priceWithDiscount: number;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  description: string;\n\n  @IsNotEmpty()\n  @ApiProperty()\n  category: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeliveryAddress.html":{"url":"classes/DeliveryAddress.html","title":"class - DeliveryAddress","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeliveryAddress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/delivery-address/delivery-address.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                city\n                            \n                            \n                                district\n                            \n                            \n                                fullname\n                            \n                            \n                                id\n                            \n                            \n                                order\n                            \n                            \n                                phoneno\n                            \n                            \n                                pincode\n                            \n                            \n                                state\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/delivery-address.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/delivery-address.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        district\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/delivery-address.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/delivery-address.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/delivery-address.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/delivery-address.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneno\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/delivery-address.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pincode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/delivery-address.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/delivery-address.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined, {eager: false})@Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/delivery-address/delivery-address.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany } from 'typeorm';\nimport { User } from '../auth/user.entity';\nimport { Exclude } from 'class-transformer';\nimport { Order } from '../orders/order.entity';\n@Entity()\nexport class DeliveryAddress {\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @Column()\n  fullname: string;\n\n  @Column()\n  phoneno: string;\n\n  @Column()\n  address: string;\n\n  @Column()\n  city: string;\n\n  @Column()\n  district: string;\n\n  @Column()\n  state: string;\n\n  @Column()\n  pincode: string;\n\n  @ManyToOne((_type) => User, (user) => user.deliveryAddress, { eager: false })\n  @Exclude({ toPlainOnly: true })\n  user: User;\n\n  @OneToMany((_type) => Order, (order) => order.deliveryAddress, { eager: true })\n  order: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DeliveryAddressController.html":{"url":"controllers/DeliveryAddressController.html","title":"controller - DeliveryAddressController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DeliveryAddressController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/delivery-address/delivery-address.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                delivery-address\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDeliveryAddress\n                            \n                            \n                                deleteDeliveryAddress\n                            \n                            \n                                getDeliveryAddress\n                            \n                            \n                                getDeliveryAddressById\n                            \n                            \n                                updateDeliveryAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDeliveryAddress\n                        \n                    \n                \n            \n            \n                \ncreateDeliveryAddress(createDeliveryAddressDto: CreateDeliveryAddressDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiCreatedResponse({description: 'Ok'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/delivery-address/delivery-address.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDeliveryAddressDto\n                                    \n                                                CreateDeliveryAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDeliveryAddress\n                        \n                    \n                \n            \n            \n                \ndeleteDeliveryAddress(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiParam({name: 'id'})@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: 'Not found(message: Product with this id not found)'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/delivery-address/delivery-address.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDeliveryAddress\n                        \n                    \n                \n            \n            \n                \ngetDeliveryAddress()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: 200, description: 'Ok'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/delivery-address/delivery-address.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDeliveryAddressById\n                        \n                    \n                \n            \n            \n                \ngetDeliveryAddressById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiParam({name: 'id'})@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: Not found(message: Product with this id not found)})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/delivery-address/delivery-address.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDeliveryAddress\n                        \n                    \n                \n            \n            \n                \nupdateDeliveryAddress(id: string, createDeliveryAddressDto: CreateDeliveryAddressDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiParam({name: 'id'})@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: Not found(message: Product with this id not found)})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/delivery-address/delivery-address.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createDeliveryAddressDto\n                                    \n                                                CreateDeliveryAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Delete, Body, Param, UseGuards } from '@nestjs/common';\nimport { DeliveryAddressService } from './delivery-address.service';\nimport { CreateDeliveryAddressDto } from './dto/create-address.dto';\nimport { DeliveryAddress } from './delivery-address.entity';\nimport { GetUser } from 'src/auth/get-user.decorator';\nimport { User } from '../auth/user.entity';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiParam, ApiTags, ApiBearerAuth, ApiUnauthorizedResponse, ApiResponse, ApiCreatedResponse } from '@nestjs/swagger';\n\n@ApiBearerAuth()\n@ApiTags('delivery-address')\n@Controller('delivery-address')\n@UseGuards(AuthGuard())\nexport class DeliveryAddressController {\n  constructor(private deliveryAddressService: DeliveryAddressService) {}\n\n  @Get()\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  getDeliveryAddress(): Promise {\n    return this.deliveryAddressService.getDeliveryAddress();\n  }\n\n  @Get('/:id')\n  @ApiParam({ name: 'id' })\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: `Not found(message: Product with this id not found)` })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  getDeliveryAddressById(@Param('id') id: string): Promise {\n    return this.deliveryAddressService.getDeliveryAddressById(id);\n  }\n\n  @Post()\n  @ApiCreatedResponse({ description: 'Ok'})\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  createDeliveryAddress(@Body() createDeliveryAddressDto: CreateDeliveryAddressDto, @GetUser() user: User): Promise {\n    return this.deliveryAddressService.createDeliveryAddress(createDeliveryAddressDto, user);\n  }\n\n  @Patch('/:id')\n  @ApiParam({ name: 'id' })\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: `Not found(message: Product with this id not found)` })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  updateDeliveryAddress(@Param('id') id:string, @Body() createDeliveryAddressDto: CreateDeliveryAddressDto, ): Promise {\n    return this.deliveryAddressService.updateDeliveryAddress(id, createDeliveryAddressDto);\n  }\n\n  @Delete('/:id')\n  @ApiParam({ name: 'id' })\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: 'Not found(message: Product with this id not found)' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  deleteDeliveryAddress(@Param('id') id:string): Promise {\n    return this.deliveryAddressService.deleteDeliveryAddress(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DeliveryAddressModule.html":{"url":"modules/DeliveryAddressModule.html","title":"module - DeliveryAddressModule","body":"\n                   \n\n\n\n\n    Modules\n    DeliveryAddressModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DeliveryAddressModule\n\n\n\ncluster_DeliveryAddressModule_imports\n\n\n\ncluster_DeliveryAddressModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nDeliveryAddressModule\n\nDeliveryAddressModule\n\nDeliveryAddressModule -->\n\nAuthModule->DeliveryAddressModule\n\n\n\n\n\nDeliveryAddressService\n\nDeliveryAddressService\n\nDeliveryAddressModule -->\n\nDeliveryAddressService->DeliveryAddressModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/delivery-address/delivery-address.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DeliveryAddressService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DeliveryAddressController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DeliveryAddressService } from './delivery-address.service';\nimport { DeliveryAddressController } from './delivery-address.controller';\nimport { DeliveryAddressRepository } from './delivery-address.repositry';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([DeliveryAddressRepository]), AuthModule],\n  providers: [DeliveryAddressService],\n  controllers: [DeliveryAddressController]\n})\nexport class DeliveryAddressModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeliveryAddressRepository.html":{"url":"classes/DeliveryAddressRepository.html","title":"class - DeliveryAddressRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeliveryAddressRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/delivery-address/delivery-address.repositry.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createDeliveryAddress\n                            \n                            \n                                    Async\n                                getDeliveryAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createDeliveryAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDeliveryAddress(createDeliveryAddressDto: CreateDeliveryAddressDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/delivery-address/delivery-address.repositry.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDeliveryAddressDto\n                                    \n                                                CreateDeliveryAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDeliveryAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDeliveryAddress()\n                \n            \n\n\n            \n                \n                    Defined in src/delivery-address/delivery-address.repositry.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { DeliveryAddress } from './delivery-address.entity';\nimport { CreateDeliveryAddressDto } from './dto/create-address.dto';\nimport { User } from '../auth/user.entity';\n\n@EntityRepository(DeliveryAddress)\nexport class DeliveryAddressRepository extends Repository {\n\n  async getDeliveryAddress(): Promise {\n    const query = this.createQueryBuilder('deliveryAddress');\n    const deliveryAddress = await query.getMany();\n    return deliveryAddress;\n  }\n\n  async createDeliveryAddress(createDeliveryAddressDto: CreateDeliveryAddressDto, user: User): Promise {\n    const { fullname, phoneno, address, city, district, state, pincode } = createDeliveryAddressDto;\n    const deliveryAddress = this.create({\n      fullname, phoneno, address, city, district, state, pincode, user\n    })\n    await this.save(deliveryAddress);\n    return deliveryAddress;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeliveryAddressService.html":{"url":"injectables/DeliveryAddressService.html","title":"injectable - DeliveryAddressService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DeliveryAddressService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/delivery-address/delivery-address.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDeliveryAddress\n                            \n                            \n                                    Async\n                                deleteDeliveryAddress\n                            \n                            \n                                getDeliveryAddress\n                            \n                            \n                                    Async\n                                getDeliveryAddressById\n                            \n                            \n                                    Async\n                                updateDeliveryAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(deliveryAddressRepository: DeliveryAddressRepository)\n                    \n                \n                        \n                            \n                                Defined in src/delivery-address/delivery-address.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        deliveryAddressRepository\n                                                  \n                                                        \n                                                                        DeliveryAddressRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDeliveryAddress\n                        \n                    \n                \n            \n            \n                \ncreateDeliveryAddress(createDeliveryAddressDto: CreateDeliveryAddressDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/delivery-address/delivery-address.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDeliveryAddressDto\n                                    \n                                                CreateDeliveryAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteDeliveryAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteDeliveryAddress(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/delivery-address/delivery-address.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDeliveryAddress\n                        \n                    \n                \n            \n            \n                \ngetDeliveryAddress()\n                \n            \n\n\n            \n                \n                    Defined in src/delivery-address/delivery-address.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDeliveryAddressById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDeliveryAddressById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/delivery-address/delivery-address.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateDeliveryAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateDeliveryAddress(id: string, createDeliveryAddressDto: CreateDeliveryAddressDto)\n                \n            \n\n\n            \n                \n                    Defined in src/delivery-address/delivery-address.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createDeliveryAddressDto\n                                    \n                                                CreateDeliveryAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeliveryAddress } from './delivery-address.entity';\nimport { CreateDeliveryAddressDto } from './dto/create-address.dto';\nimport { DeliveryAddressRepository } from './delivery-address.repositry';\nimport { User } from '../auth/user.entity';\n\n@Injectable()\nexport class DeliveryAddressService {\n  constructor(@InjectRepository(DeliveryAddressRepository) private deliveryAddressRepository: DeliveryAddressRepository) {}\n\n  getDeliveryAddress(): Promise {\n      return this.deliveryAddressRepository.getDeliveryAddress();\n  }\n\n  async getDeliveryAddressById(id: string): Promise {\n    const found = await this.deliveryAddressRepository.findOne({ where: { id }});\n    if(!found) {\n      throw new NotFoundException(`DeliveryAddress with ID ${id} not found`);\n    }\n    return found;\n  }\n\n  createDeliveryAddress(createDeliveryAddressDto: CreateDeliveryAddressDto, user: User): Promise {\n      return this.deliveryAddressRepository.createDeliveryAddress(createDeliveryAddressDto, user);\n  }\n\n  async updateDeliveryAddress(id: string, createDeliveryAddressDto: CreateDeliveryAddressDto): Promise {\n    const deliveryAddress = await this.getDeliveryAddressById(id);\n\n    deliveryAddress.fullname = createDeliveryAddressDto.fullname;\n    deliveryAddress.phoneno = createDeliveryAddressDto.phoneno;\n    deliveryAddress.address = createDeliveryAddressDto.address;\n    deliveryAddress.city = createDeliveryAddressDto.city;\n    deliveryAddress.district = createDeliveryAddressDto.district;\n    deliveryAddress.state = createDeliveryAddressDto.state;\n    deliveryAddress.pincode = createDeliveryAddressDto.pincode;\n\n    await this.deliveryAddressRepository.save(deliveryAddress);\n    return deliveryAddress;\n  }\n\n  async deleteDeliveryAddress(id: string): Promise {\n    const result = await this.deliveryAddressRepository.delete({ id });\n    console.log(result);\n    if(result.affected === 0) {\n      throw new NotFoundException(`DeliveryAddress with ID ${id} not found`)\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n    email: string;\n  }\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: UsersRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersRepository } from './users.repository';\nimport { JwtPayload } from './jwt-payload.interface';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(@InjectRepository(UsersRepository) private usersRepository: UsersRepository) {\n    super({\n      secretOrKey: 'topSecret51',\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const { email } = payload;\n    const user: User = await this.usersRepository.findOne({ email });\n\n    if(!user){\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Order.html":{"url":"classes/Order.html","title":"class - Order","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                deliveryAddress\n                            \n                            \n                                id\n                            \n                            \n                                paymentMode\n                            \n                            \n                                product\n                            \n                            \n                                quantity\n                            \n                            \n                                totalAmount\n                            \n                            \n                                totalDiscount\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        deliveryAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined, {eager: false})@Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined, {eager: false})@Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalDiscount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined, {eager: false})@Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\nimport { User } from '../auth/user.entity';\nimport { Exclude } from 'class-transformer';\nimport { Product } from '../products/product.entity';\nimport { DeliveryAddress } from '../delivery-address/delivery-address.entity';\n\n@Entity()\nexport class Order {\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @Column()\n  quantity: number;\n\n  @Column()\n  totalDiscount: number;\n\n  @Column()\n  totalAmount: number;\n\n  @Column()\n  paymentMode: string;\n\n  @ManyToOne((_type) => User, (user) => user.order, { eager: false })\n  @Exclude({ toPlainOnly: true })\n  user: User;\n\n  @ManyToOne((_type) => Product, (product) => product.order, { eager: false })\n  @Exclude({ toPlainOnly: true })\n  product: number;\n\n  @ManyToOne((_type) => DeliveryAddress, (deliveryAddress) => deliveryAddress.order, { eager: false })\n  @Exclude({ toPlainOnly: true })\n  deliveryAddress: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrdersController.html":{"url":"controllers/OrdersController.html","title":"controller - OrdersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createOrder\n                            \n                            \n                                deleteOrder\n                            \n                            \n                                getOrderById\n                            \n                            \n                                getOrders\n                            \n                            \n                                updateOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createOrder\n                        \n                    \n                \n            \n            \n                \ncreateOrder(createOrderDto: CreateOrderDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiCreatedResponse({description: 'Ok'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/orders/orders.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createOrderDto\n                                    \n                                                CreateOrderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteOrder\n                        \n                    \n                \n            \n            \n                \ndeleteOrder(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiParam({name: 'id'})@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: 'Not found(message: Product with this id not found)'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/orders/orders.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOrderById\n                        \n                    \n                \n            \n            \n                \ngetOrderById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: Not found(message: Product with this id not found)})@ApiUnauthorizedResponse({description: 'Unauthorized User'})@ApiParam({name: 'id'})\n                \n            \n\n            \n                \n                    Defined in src/orders/orders.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOrders\n                        \n                    \n                \n            \n            \n                \ngetOrders()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: 200, description: 'Ok'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/orders/orders.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateOrder\n                        \n                    \n                \n            \n            \n                \nupdateOrder(id: string, createOrderDto: CreateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@ApiParam({name: 'id'})@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: 'Not found(message: Product with this id not found)'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})@ApiParam({name: 'id'})\n                \n            \n\n            \n                \n                    Defined in src/orders/orders.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createOrderDto\n                                    \n                                                CreateOrderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Delete, Body, Param, UseGuards } from '@nestjs/common';\nimport { OrdersService } from './orders.service';\nimport { CreateOrderDto } from './dto/create-order.dto';\nimport { Order } from './order.entity';\nimport { ApiParam, ApiTags, ApiBearerAuth, ApiUnauthorizedResponse, ApiResponse, ApiCreatedResponse } from '@nestjs/swagger';\nimport { Category } from '../category/category.entity';\nimport { GetCategory } from '../category/get-category.decorator';\nimport { AuthGuard } from '@nestjs/passport';\nimport { GetUser } from 'src/auth/get-user.decorator';\nimport { User } from '../auth/user.entity';\n\n@ApiBearerAuth()\n@ApiTags('orders')\n@Controller('orders')\n@UseGuards(AuthGuard())\nexport class OrdersController {\n  constructor(private ordersService: OrdersService) {}\n\n  @Get()\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  getOrders(): Promise {\n    return this.ordersService.getOrders();\n  }\n\n  @Get('/:id')\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: `Not found(message: Product with this id not found)` })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  @ApiParam({ name: 'id' })\n  getOrderById(@Param('id') id: string): Promise {\n    return this.ordersService.getOrderById(id);\n  }\n\n  @Post()\n  @ApiCreatedResponse({ description: 'Ok'})\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  createOrder(@Body() createOrderDto: CreateOrderDto, @GetUser() user: User): Promise {\n    return this.ordersService.createOrder(createOrderDto, user);\n  }\n\n  @Patch('/:id')\n  @ApiParam({ name: 'id' })\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: 'Not found(message: Product with this id not found)' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  @ApiParam({ name: 'id' })\n  updateOrder(@Param('id') id:string, @Body() createOrderDto: CreateOrderDto): Promise {\n    return this.ordersService.updateOrder(id, createOrderDto);\n  }\n\n  @Delete('/:id')\n  @ApiParam({ name: 'id' })\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: 'Not found(message: Product with this id not found)' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  deleteOrder(@Param('id') id:string): Promise {\n    return this.ordersService.deleteOrder(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_imports\n\n\n\ncluster_OrdersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nAuthModule->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/orders/orders.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OrdersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrdersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrdersService } from './orders.service';\nimport { OrdersController } from './orders.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { OrdersRepository } from './orders.repository';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([OrdersRepository]), AuthModule],\n  providers: [OrdersService],\n  controllers: [OrdersController]\n})\nexport class OrdersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrdersRepository.html":{"url":"classes/OrdersRepository.html","title":"class - OrdersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrdersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOrder\n                            \n                            \n                                    Async\n                                getOrders\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOrder(createOrderDto: CreateOrderDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/orders/orders.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createOrderDto\n                                    \n                                                CreateOrderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOrders\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrders()\n                \n            \n\n\n            \n                \n                    Defined in src/orders/orders.repository.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { Order } from './order.entity';\nimport { CreateOrderDto } from './dto/create-order.dto';\nimport { User } from '../auth/user.entity';\n\n@EntityRepository(Order)\nexport class OrdersRepository extends Repository {\n\n  async getOrders(): Promise {\n    const query = this.createQueryBuilder('order');\n    const orders = await query.getMany();\n    return orders;\n  }\n\n  async createOrder(createOrderDto: CreateOrderDto, user: User): Promise {\n    const { quantity, totalDiscount, totalAmount, paymentMode, product, deliveryAddress } = createOrderDto;\n    const order = this.create({\n      quantity, totalDiscount, totalAmount, paymentMode, product, deliveryAddress, user\n    })\n    await this.save(order);\n    return order;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrdersService.html":{"url":"injectables/OrdersService.html","title":"injectable - OrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createOrder\n                            \n                            \n                                    Async\n                                deleteOrder\n                            \n                            \n                                    Async\n                                getOrderById\n                            \n                            \n                                getOrders\n                            \n                            \n                                    Async\n                                updateOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ordersRepository: OrdersRepository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/orders.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ordersRepository\n                                                  \n                                                        \n                                                                        OrdersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createOrder\n                        \n                    \n                \n            \n            \n                \ncreateOrder(createOrderDto: CreateOrderDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/orders/orders.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createOrderDto\n                                    \n                                                CreateOrderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOrder\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOrder(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/orders/orders.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOrderById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrderById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/orders/orders.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOrders\n                        \n                    \n                \n            \n            \n                \ngetOrders()\n                \n            \n\n\n            \n                \n                    Defined in src/orders/orders.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateOrder\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOrder(id: string, createOrderDto: CreateOrderDto)\n                \n            \n\n\n            \n                \n                    Defined in src/orders/orders.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createOrderDto\n                                    \n                                                CreateOrderDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateOrderDto } from './dto/create-order.dto';\nimport { Order } from './order.entity';\nimport { OrdersRepository } from './orders.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../auth/user.entity';\n\n@Injectable()\nexport class OrdersService {\n  constructor(@InjectRepository(OrdersRepository) private ordersRepository: OrdersRepository) {}\n\n  getOrders(): Promise {\n      return this.ordersRepository.getOrders();\n  }\n\n  async getOrderById(id: string): Promise {\n    const found = await this.ordersRepository.findOne({ where: { id }});\n    if(!found) {\n      throw new NotFoundException(`Order with ID ${id} not found`);\n    }\n    return found;\n  }\n\n  createOrder(createOrderDto: CreateOrderDto, user: User): Promise {\n      return this.ordersRepository.createOrder(createOrderDto, user);\n  }\n\n  async updateOrder(id: string, createOrderDto: CreateOrderDto): Promise {\n    const order = await this.getOrderById(id);\n\n    order.quantity = createOrderDto.quantity;\n    order.totalDiscount = createOrderDto.totalDiscount;\n    order.totalAmount = createOrderDto.totalAmount;\n    order.paymentMode = createOrderDto.paymentMode;\n    order.product = createOrderDto.product;\n    order.deliveryAddress = createOrderDto.deliveryAddress;\n\n    await this.ordersRepository.save(order);\n    return order;\n  }\n\n  async deleteOrder(id: string): Promise {\n    const result = await this.ordersRepository.delete({ id });\n    console.log(result);\n    if(result.affected === 0) {\n      throw new NotFoundException(`Order with ID ${id} not found`)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/product.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                description\n                            \n                            \n                                discount\n                            \n                            \n                                id\n                            \n                            \n                                order\n                            \n                            \n                                price\n                            \n                            \n                                priceWithDiscount\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined, {eager: false})@Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        discount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        priceWithDiscount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined, {eager: false})@Exclude({toPlainOnly: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany } from 'typeorm';\nimport { Category } from '../category/category.entity';\nimport { User } from '../auth/user.entity';\nimport { Exclude } from 'class-transformer';\nimport { Order } from '../orders/order.entity';\n\n@Entity()\nexport class Product {\n  @PrimaryGeneratedColumn()\n  id: string;\n\n  @Column()\n  title: string;\n\n  @Column()\n  price: number;\n\n  @Column()\n  discount: number;\n\n  @Column()\n  priceWithDiscount: number;\n\n  @Column()\n  description: string;\n\n  @ManyToOne((_type) => Category, (category) => category.products, { eager: false })\n  @Exclude({ toPlainOnly: true })\n  category: string;\n\n  @ManyToOne((_type) => User, (user) => user.product, { eager: false })\n  @Exclude({ toPlainOnly: true })\n  user: User;\n\n  @OneToMany((_type) => Order, (order) => order.product, { eager: true })\n  order: Order[];\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createProduct\n                            \n                            \n                                deleteProduct\n                            \n                            \n                                getProducts\n                            \n                            \n                                getProductsById\n                            \n                            \n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createProduct\n                        \n                    \n                \n            \n            \n                \ncreateProduct(createProductDto: CreateProductDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(undefined)@Post()@ApiCreatedResponse({description: 'Ok'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \ndeleteProduct(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(undefined)@Delete('/:id')@ApiParam({name: 'id'})@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: 'Not found(message: Product with this id not found)'})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProducts\n                        \n                    \n                \n            \n            \n                \ngetProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({status: 200, description: 'Ok'})\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProductsById\n                        \n                    \n                \n            \n            \n                \ngetProductsById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiParam({name: 'id'})@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: Not found(message: Product with this id not found)})\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProduct\n                        \n                    \n                \n            \n            \n                \nupdateProduct(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(undefined)@Patch('/:id')@ApiParam({name: 'id'})@ApiResponse({status: 200, description: 'Ok'})@ApiResponse({status: 404, description: Not found(message: Product with this id not found)})@ApiUnauthorizedResponse({description: 'Unauthorized User'})\n                \n            \n\n            \n                \n                    Defined in src/products/products.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Delete, Body, Param, UseGuards } from '@nestjs/common';\nimport { ProductsService } from './products.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { Product } from './product.entity';\nimport { ApiParam, ApiTags, ApiBearerAuth, ApiUnauthorizedResponse, ApiResponse, ApiCreatedResponse } from '@nestjs/swagger';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Category } from '../category/category.entity';\nimport { GetCategory } from '../category/get-category.decorator';\nimport { AuthGuard } from '@nestjs/passport';\nimport { GetUser } from 'src/auth/get-user.decorator';\nimport { User } from '../auth/user.entity';\n\n@ApiTags('products')\n@Controller('products')\nexport class ProductsController {\n\n  constructor(private productsService: ProductsService) {}\n\n  @Get()\n  @ApiResponse({ status:200, description: 'Ok' })\n  getProducts(): Promise {\n    return this.productsService.getProducts();\n  }\n\n  @Get('/:id')\n  @ApiParam({ name: 'id' })\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: `Not found(message: Product with this id not found)` })\n  getProductsById(@Param('id') id: string): Promise {\n    return this.productsService.getProductById(id);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard())\n  @Post()\n  @ApiCreatedResponse({ description: 'Ok'})\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  createProduct(@Body() createProductDto: CreateProductDto, @GetUser() user: User): Promise {\n    return this.productsService.createProduct(createProductDto, user);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard())\n  @Patch('/:id')\n  @ApiParam({ name: 'id' })\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: `Not found(message: Product with this id not found)` })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  updateProduct(@Param('id') id:string, @Body() updateProductDto: UpdateProductDto): Promise {\n    return this.productsService.updateProduct(id, updateProductDto);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(AuthGuard())\n  @Delete('/:id')\n  @ApiParam({ name: 'id' })\n  @ApiResponse({ status:200, description: 'Ok' })\n  @ApiResponse({ status:404, description: 'Not found(message: Product with this id not found)' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized User' })\n  deleteProduct(@Param('id') id:string): Promise {\n    return this.productsService.deleteProduct(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProductsModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nAuthModule->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsController } from './products.controller';\nimport { ProductsService } from './products.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ProductsRepository } from './products.repository';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([ProductsRepository]), AuthModule],\n  controllers: [ProductsController],\n  providers: [ProductsService]\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProductsRepository.html":{"url":"classes/ProductsRepository.html","title":"class - ProductsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProductsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                    Async\n                                getProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct(createProductDto: CreateProductDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.repository.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProducts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProducts()\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.repository.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { Product } from './product.entity';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { Category } from '../category/category.entity';\nimport { User } from '../auth/user.entity';\n\n@EntityRepository(Product)\nexport class ProductsRepository extends Repository {\n\n  async getProducts(): Promise {\n    const query = this.createQueryBuilder('product');\n    const products = await query.getMany();\n    return products;\n  }\n\n  async createProduct(createProductDto: CreateProductDto, user: User): Promise {\n    const { title, price, discount, priceWithDiscount, description, category } = createProductDto;\n    const product = this.create({\n      title, price, discount, priceWithDiscount, description, category, user\n    })\n    await this.save(product);\n    return product;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createProduct\n                            \n                            \n                                    Async\n                                deleteProduct\n                            \n                            \n                                    Async\n                                getProductById\n                            \n                            \n                                getProducts\n                            \n                            \n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: ProductsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/products/products.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        ProductsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createProduct\n                        \n                    \n                \n            \n            \n                \ncreateProduct(createProductDto: CreateProductDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductDto\n                                    \n                                                CreateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteProduct(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProductById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProductById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProducts\n                        \n                    \n                \n            \n            \n                \ngetProducts()\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProduct(id: string, updateProductDto: UpdateProductDto)\n                \n            \n\n\n            \n                \n                    Defined in src/products/products.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductDto\n                                    \n                                                UpdateProductDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { Product } from './product.entity';\nimport { ProductsRepository } from './products.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { Category } from '../category/category.entity';\nimport { User } from '../auth/user.entity';\n\n@Injectable()\nexport class ProductsService {\n\n  constructor(@InjectRepository(ProductsRepository) private productsRepository: ProductsRepository) {}\n\n  getProducts(): Promise {\n      return this.productsRepository.getProducts();\n  }\n\n  async getProductById(id: string): Promise {\n    const found = await this.productsRepository.findOne({ where: { id }});\n    if(!found) {\n      throw new NotFoundException(`Product with ID ${id} not found`);\n    }\n    return found;\n  }\n\n  createProduct (createProductDto: CreateProductDto, user: User): Promise {\n      return this.productsRepository.createProduct(createProductDto, user);\n  }\n\n  async updateProduct(id: string, updateProductDto: UpdateProductDto): Promise {\n    const product = await this.getProductById(id);\n\n    product.title = updateProductDto.title;\n    product.price = updateProductDto.price;\n    product.discount = updateProductDto.discount;\n    product.priceWithDiscount = updateProductDto.priceWithDiscount;\n    product.description = updateProductDto.description;\n    product.category = updateProductDto.category;\n\n    // const product = {\n    //   title: createProductDto.title,\n    //   price: createProductDto.price,\n    //   discount: createProductDto.discount,\n    //   priceWithDiscount: createProductDto.priceWithDiscount,\n    //   description: createProductDto.description\n    // }\n\n    await this.productsRepository.save(product);\n    return product;\n  }\n\n  async deleteProduct(id: string): Promise {\n    const result = await this.productsRepository.delete({ id });\n    console.log(result);\n    if(result.affected === 0) {\n      throw new NotFoundException(`Product with ID ${id} not found`)\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/signIn.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signIn.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/signIn.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class SignInDto {\n\n  @ApiProperty()\n  email: string;\n\n  @ApiProperty()\n  password: string;\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/transform.interceptor.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NestInterceptor, ExecutionContext, Injectable, CallHandler } from '@nestjs/common';\nimport { classToPlain } from 'class-transformer';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next:CallHandler) {\n    return next.handle().pipe(map((data) => classToPlain(data)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dto/update-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                description\n                            \n                            \n                                discount\n                            \n                            \n                                price\n                            \n                            \n                                priceWithDiscount\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        discount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        priceWithDiscount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dto/update-product.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateProductDto {\n\n  @ApiProperty()\n  title: string;\n\n  @ApiProperty()\n  price: number;\n\n  @ApiProperty()\n  discount: number;\n\n  @ApiProperty()\n  priceWithDiscount: number;\n\n  @ApiProperty()\n  description: string;\n\n  @ApiProperty()\n  category: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                deliveryAddress\n                            \n                            \n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                id\n                            \n                            \n                                lastname\n                            \n                            \n                                order\n                            \n                            \n                                password\n                            \n                            \n                                product\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        deliveryAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DeliveryAddress[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\nimport { UserRole } from './user-role.enum';\nimport { Product } from '../products/product.entity';\nimport { DeliveryAddress } from '../delivery-address/delivery-address.entity';\nimport { Order } from '../orders/order.entity';\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: string;\n\n    @Column()\n    firstname: string;\n\n    @Column()\n    lastname: string;\n\n    @Column({ unique: true })\n    username: string;\n\n    @Column({ unique: true })\n    email: string;\n\n    @Column()\n    password: string;\n\n    @Column()\n    role: UserRole;\n\n    @OneToMany((_type) => Product, (product) => product.user, { eager: true })\n    product: Product[];\n\n    @OneToMany((_type) => DeliveryAddress, (deliveryAddress) => deliveryAddress.user, { eager: true })\n    deliveryAddress: DeliveryAddress[];\n\n    @OneToMany((_type) => Order, (order) => order.user, { eager: true })\n    order: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersRepository.html":{"url":"classes/UsersRepository.html","title":"class - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAdmin\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAdmin\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAdmin(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users.repository.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users.repository.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/users.repository.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { User } from './user.entity'\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { ConflictException, InternalServerErrorException } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { UserRole } from './user-role.enum';\n@EntityRepository(User)\nexport class UsersRepository extends Repository {\n  async createUser(authCredentialsDto: AuthCredentialsDto):  Promise {\n    const { firstname, lastname, username, email, password } = authCredentialsDto;\n\n    //incrypt password using bcrypt\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt)\n    //create user\n    const user = this.create({ firstname, lastname, username, email, password: hashedPassword,  role: UserRole.USER, })\n\n    try {\n      await this.save(user);\n\n    } catch (error) {\n\n      console.log(error.code);\n      if(error.code === 'ER_DUP_ENTRY') {\n        //ER_DUP_ENTRY is error code for duplicate username(generate in catch error)\n        throw new ConflictException('Username already exists');\n      } else {\n        throw new InternalServerErrorException();\n      }\n    }\n  }\n\n\n  async createAdmin(authCredentialsDto: AuthCredentialsDto):  Promise {\n    const { firstname, lastname, username, email, password } = authCredentialsDto;\n\n    //incrypt password using bcrypt\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt)\n    //create user\n    const user = this.create({ firstname, lastname, username, email, password: hashedPassword,  role: UserRole.ADMIN, })\n\n    try {\n      await this.save(user);\n\n    } catch (error) {\n\n      console.log(error.code);\n      if(error.code === 'ER_DUP_ENTRY') {\n        //ER_DUP_ENTRY is error code for duplicate username(generate in catch error)\n        throw new ConflictException('Username already exists');\n      } else {\n        throw new InternalServerErrorException();\n      }\n    }\n  }\n\n  async getUsers(): Promise {\n\n    const query = this.createQueryBuilder('user');\n\n    const products = await query.getMany();\n    return products;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-credentials.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/signIn.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auth/users.repository.ts\n            \n            class\n            UsersRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/category/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/category/category.repository.ts\n            \n            class\n            CategoryRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/category/get-category.decorator.ts\n            \n            variable\n            GetCategory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/delivery-address/delivery-address.controller.ts\n            \n            controller\n            DeliveryAddressController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/delivery-address/delivery-address.entity.ts\n            \n            class\n            DeliveryAddress\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/delivery-address/delivery-address.repositry.ts\n            \n            class\n            DeliveryAddressRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/delivery-address/delivery-address.service.ts\n            \n            injectable\n            DeliveryAddressService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/delivery-address/dto/create-address.dto.ts\n            \n            class\n            CreateDeliveryAddressDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/dto/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/orders/order.entity.ts\n            \n            class\n            Order\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/orders/orders.controller.ts\n            \n            controller\n            OrdersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/orders/orders.repository.ts\n            \n            class\n            OrdersRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/orders.service.ts\n            \n            injectable\n            OrdersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/products/products.repository.ts\n            \n            class\n            ProductsRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.1.4\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.5.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.40\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 SUPER_ADMIN\n                            \n                        \n                        \n                            \n                                Value : SUPER_ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DeliveryAddressModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_DeliveryAddressModule\n\n\n\ncluster_DeliveryAddressModule_providers\n\n\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nAuthModule->CategoryModule\n\n\n\n\n\nDeliveryAddressModule\n\nDeliveryAddressModule\n\nDeliveryAddressModule -->\n\nAuthModule->DeliveryAddressModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nAuthModule->OrdersModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nAuthModule->ProductsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\nAppModule -->\n\nDeliveryAddressModule->AppModule\n\n\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nDeliveryAddressService\n\nDeliveryAddressService\n\nDeliveryAddressModule -->\n\nDeliveryAddressService->DeliveryAddressModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetCategory   (src/.../get-category.decorator.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/category/get-category.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCategory\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data, ctx: ExecutionContext): Category => {\n    const req = ctx.switchToHttp().getRequest();\n    return req.category;\n  }\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/get-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (_data, ctx: ExecutionContext): User => {\n    const req = ctx.switchToHttp().getRequest();\n    return req.user;\n  }\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
